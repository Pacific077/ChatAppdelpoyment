{"version":3,"sources":["Context/ChatProvider.js","components/Authentication/Login.js","components/Authentication/Signup.js","Pages/Homepage.js","components/SingleChat.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","components/ScrollableChat.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","Context/SchedulemessageForm.js","components/ScheduleMessageform.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","Pages/Joingrp.jsx","App.js","reportWebVitals.js","Context/ScheduleFormProvider.js","index.js"],"names":["ChatContext","createContext","ChatState","useContext","ChatProvider","children","useState","selectedChat","setSelectedChat","user","setUser","notification","setNotification","chats","setChats","history","useHistory","useEffect","userInfo","JSON","parse","localStorage","getItem","push","Provider","value","Login","show","setShow","toast","useToast","email","setEmail","password","setPassword","loading","setLoading","submitHandler","a","title","status","duration","isClosable","position","config","headers","axios","post","data","setItem","stringify","description","response","message","spacing","color","id","isRequired","type","placeholder","onChange","e","target","borderColor","focusBorderColor","size","width","bg","_hover","h","_focus","onClick","style","marginTop","isLoading","variant","colorScheme","Signup","handleClick","name","setName","confirmpassword","setConfirmpassword","pic","setPic","picLoading","setPicLoading","console","log","resp","p","accept","pics","undefined","FormData","append","fetch","method","body","then","res","json","url","toString","catch","err","postDetails","files","Homepage","socket","selectedChatCompare","activeTab","className","maxW","centerContent","d","justifyContent","w","m","borderRadius","borderWidth","textColor","fontWeight","fontSize","fontFamily","isFitted","mb","_selected","isSameSenderMargin","messages","i","userId","length","sender","_id","isSameSender","isLastMessage","isSameUser","getSender","loggedUser","users","ProfileModal","useDisclosure","isOpen","onOpen","onClose","base","icon","View","isCentered","flexDir","alignItems","boxSize","src","alt","md","ScrollableChat","map","display","label","placement","hasArrow","mt","mr","cursor","backgroundColor","marginLeft","padding","maxWidth","content","UserBadgeItem","handleFunction","admin","px","py","Close","pl","UserListItem","background","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","handleSearch","query","Authorization","token","get","handleRename","put","chatId","chatName","handleAddUser","user1","find","u","groupAdmin","handleRemove","flexWrap","pb","ml","ScheduleFormContext","ScheduleMessageform","setMessages","hour","setHour","minute","setminute","date","setDate","newMessage","setNewMessage","setScheduleFormVis","sendMessagebtn","scheduledTime","emit","boxSizing","boxShadow","right","bgColor","height","marginBottom","as","IoMdClock","border","marginRight","gridGap","left","top","textAlign","ChevronUp","ChevronDown","float","SingleChat","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","Formcontext","ScheduleFormVis","showEmoticonTray","setShowEmoticonTray","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","sendMessage","event","key","io","on","newMessageRecieved","chat","includes","pickerRef","useRef","handleClickOutside","current","contains","document","addEventListener","removeEventListener","fontStyle","justifyItems","ArrowBack","isGroupChat","toUpperCase","overflowY","alignSelf","margin","onKeyDown","options","ref","bottom","preview","onEmojiSelect","emoji","prevMessage","native","lastTypingTime","Date","getTime","setTimeout","ArrowRight","Chatbox","ChatLoading","GroupChatModal","selectedUsers","setSelectedUsers","handleSubmit","thickness","speed","emptyColor","delUser","filter","sel","slice","userToAdd","MyChats","setLoggedUser","fetchChats","lg","rightIcon","Add","latestMessage","substring","SideDrawer","loadingChat","setLoadingChat","accessChat","c","count","effect","Effect","SCALE","Bell","notif","n","Button","removeItem","borderBottomWidth","Chatpage","Joingrp","useParams","handleJoingrp","textShadow","App","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScheduleFormProvider","ReactDOM","render","getElementById"],"mappings":"o3MAGMA,EAAcC,0BAoCPC,EAAY,WACvB,OAAOC,qBAAWH,IAGLI,EAtCM,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACtB,EAAwCC,qBAAxC,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAwBF,qBAAxB,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAAwCJ,mBAAS,IAAjD,mBAAOK,EAAP,KAAqBC,EAArB,KACA,EAA0BN,qBAA1B,mBAAOO,EAAP,KAAcC,EAAd,KAEMC,EAAUC,uBAUhB,OARAC,qBAAU,WACR,IAAMC,EAAWC,KAAKC,MAAMC,aAAaC,QAAQ,aACjDZ,EAAQQ,GAEHA,GAAUH,EAAQQ,KAAK,OAE3B,CAACR,IAGF,cAACf,EAAYwB,SAAb,CACEC,MAAO,CACLlB,eACAC,kBACAC,OACAC,UACAC,eACAC,kBACAC,QACAC,YATJ,SAYGT,KCkGQqB,EA1HD,WACZ,MAAwBpB,oBAAS,GAAjC,mBAAOqB,EAAP,KAAaC,EAAb,KAEMC,EAAQC,cACd,EAA0BxB,qBAA1B,mBAAOyB,EAAP,KAAcC,EAAd,KACA,EAAgC1B,qBAAhC,mBAAO2B,EAAP,KAAiBC,EAAjB,KACA,EAA8B5B,oBAAS,GAAvC,mBAAO6B,EAAP,KAAgBC,EAAhB,KAEMrB,EAAUC,uBACRN,EAAYR,IAAZQ,QAEF2B,EAAa,uCAAG,gCAAAC,EAAA,yDACpBF,GAAW,GACNL,GAAUE,EAFK,uBAGlBJ,EAAM,CACJU,MAAO,6BACPC,OAAQ,UACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAEZP,GAAW,GAVO,0CAeZQ,EAAS,CACbC,QAAS,CACP,eAAgB,qBAjBF,SAqBKC,IAAMC,KAC3B,kBACA,CAAEhB,QAAOE,YACTW,GAxBgB,gBAqBVI,EArBU,EAqBVA,KAMRnB,EAAM,CACJU,MAAO,mBACPC,OAAQ,UACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAEZjC,EAAQsC,GACR3B,aAAa4B,QAAQ,WAAY9B,KAAK+B,UAAUF,IAChDZ,GAAW,GACXrB,EAAQQ,KAAK,UArCK,kDAuClBM,EAAM,CACJU,MAAO,iBACPY,YAAa,KAAMC,SAASJ,KAAKK,QACjCb,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAEZP,GAAW,GA/CO,0DAAH,qDAmDnB,OACE,eAAC,IAAD,CAAQkB,QAAQ,OAAOC,MAAM,QAA7B,UACE,eAAC,IAAD,CAAcC,GAAG,QAAQC,YAAU,EAAnC,UACE,cAAC,IAAD,4BACA,cAAC,IAAD,CACEhC,MAAOM,EACP2B,KAAK,QACLC,YAAY,2BACZC,SAAU,SAACC,GAAD,OAAO7B,EAAS6B,EAAEC,OAAOrC,QACnCsC,YAAY,WACZC,iBAAiB,gBAGrB,eAAC,IAAD,CAAaR,GAAG,WAAWC,YAAU,EAArC,UACE,cAAC,IAAD,uBACA,eAAC,IAAD,CAAYQ,KAAK,KAAjB,UACE,cAAC,IAAD,CACExC,MAAOQ,EACP2B,SAAU,SAACC,GAAD,OAAO3B,EAAY2B,EAAEC,OAAOrC,QACtCiC,KAAM/B,EAAO,OAAS,WACtBgC,YAAY,iBACZK,iBAAiB,aAGnB,cAAC,IAAD,CAAmBE,MAAM,SAAzB,SACE,cAAC,IAAD,CAAQC,GAAG,WAAWC,OAAQ,CAACD,GAAG,YAAaE,EAAE,UAAUC,OAAO,OAAOL,KAAK,KAAKM,QArFzE,kBAAM3C,GAASD,IAqFzB,SACGA,EAAO,OAAS,iBAKzB,cAAC,IAAD,CAEEwC,GAAI,WACJD,MAAM,OACNM,MAAO,CAAEC,UAAW,IACpBF,QAASlC,EACTqC,UAAWvC,EACXmC,OAAO,OACPN,iBAAiB,WARnB,mBAYA,cAAC,IAAD,CAEEW,QAAQ,QACRC,YAAY,MACZV,MAAM,OACNI,OAAO,OACPC,QAAS,WACPvC,EAAS,qBACTE,EAAY,WARhB,4CC8FS2C,EAxMA,WACb,MAAwBvE,oBAAS,GAAjC,mBAAOqB,EAAP,KAAaC,EAAb,KACMkD,EAAc,kBAAMlD,GAASD,IAC7BE,EAAQC,cAGd,GAFgBd,uBAEQV,sBAAxB,mBAAOyE,EAAP,KAAaC,EAAb,KACA,EAA0B1E,qBAA1B,mBAAOyB,EAAP,KAAcC,EAAd,KACA,EAA8C1B,qBAA9C,mBAAO2E,EAAP,KAAwBC,EAAxB,KACA,EAAgC5E,qBAAhC,mBAAO2B,EAAP,KAAiBC,EAAjB,KACA,EAAsB5B,qBAAtB,mBAAO6E,EAAP,KAAYC,EAAZ,KACA,EAAoC9E,oBAAS,GAA7C,mBAAO+E,EAAP,KAAmBC,EAAnB,KAEMjD,EAAa,uCAAG,8BAAAC,EAAA,yDACpBgD,GAAc,GACTP,GAAShD,GAAUE,GAAagD,EAFjB,uBAGlBpD,EAAM,CACJU,MAAO,6BACPC,OAAQ,UACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAEZ2C,GAAc,GAVI,6BAahBrD,IAAagD,EAbG,uBAclBpD,EAAM,CACJU,MAAO,yBACPC,OAAQ,UACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAnBM,iCAuBpB4C,QAAQC,IAAIT,EAAMhD,EAAOE,EAAUkD,GAvBf,SAyBZvC,EAAS,CACbC,QAAS,CACP,eAAgB,qBA3BF,UA8BAC,IAAMC,KACtB,YACA,CACEgC,OACAhD,QACAE,WACAkD,OAEFvC,GAtCgB,QA8BZ6C,EA9BY,OAwClBF,QAAQC,IAAI,WAAWC,EAAKzC,MAC5BnB,EAAM,CACJU,MAAO,0CACPC,OAAQ,UACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAEZtB,aAAa4B,QAAQ,WAAY9B,KAAK+B,UAAUuC,EAAKzC,OACrDsC,GAAc,GAjDI,kDAoDlBzD,EAAM,CACJU,MAAO,iBACPY,YAAa,KAAMC,SAASJ,KAAKK,QACjCb,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAEZ2C,GAAc,GA5DI,0DAAH,qDA6GnB,OACE,eAAC,IAAD,CAAQhC,QAAQ,MAAMC,MAAM,QAA5B,UACE,eAAC,IAAD,CAAaC,GAAG,aAAaC,YAAU,EAAvC,UACE,cAAC,IAAD,mBACA,cAAC,IAAD,CACEE,YAAY,kBACZK,iBAAiB,WACjBJ,SAAU,SAACC,GAAD,OAAOmB,EAAQnB,EAAEC,OAAOrC,aAGtC,eAAC,IAAD,CAAa+B,GAAG,QAAQC,YAAU,EAAlC,UACE,cAAC,IAAD,4BACA,cAAC,IAAD,CACEC,KAAK,QACLM,iBAAiB,WACjBL,YAAY,2BACZC,SAAU,SAACC,GAAD,OAAO7B,EAAS6B,EAAEC,OAAOrC,aAGvC,eAAC,IAAD,CAAa+B,GAAG,WAAWC,YAAU,EAArC,UACE,cAAC,IAAD,uBACA,eAAC,IAAD,CAAYQ,KAAK,KAAjB,UACE,cAAC,IAAD,CACEP,KAAM/B,EAAO,OAAS,WACtBgC,YAAY,iBACZK,iBAAiB,WACjBJ,SAAU,SAACC,GAAD,OAAO3B,EAAY2B,EAAEC,OAAOrC,UAExC,cAAC,IAAD,CAAmByC,MAAM,SAAzB,SACE,cAAC,IAAD,CAAQG,EAAE,UAAUJ,KAAK,KAAKE,GAAG,WAAWC,OAAQ,CAACD,GAAG,YAAaG,OAAO,OAAOC,QAASO,EAA5F,SACGnD,EAAO,OAAS,iBAKzB,eAAC,IAAD,CAAa6B,GAAG,WAAWC,YAAU,EAArC,UACE,cAAC,IAAD,+BACA,eAAC,IAAD,CAAYQ,KAAK,KAAjB,UACE,cAAC,IAAD,CACEP,KAAM/B,EAAO,OAAS,WACtBgC,YAAY,mBACZK,iBAAiB,WACjBJ,SAAU,SAACC,GAAD,OAAOqB,EAAmBrB,EAAEC,OAAOrC,UAE/C,cAAC,IAAD,CAAmByC,MAAM,SAAzB,SACE,cAAC,IAAD,CAAQG,EAAE,UAAUJ,KAAK,KAAKE,GAAG,WAAWC,OAAQ,CAACD,GAAG,YAAaG,OAAO,OAAOC,QAASO,EAA5F,SACGnD,EAAO,OAAS,iBAKzB,eAAC,IAAD,CAAa6B,GAAG,MAAhB,UACE,cAAC,IAAD,kCACA,cAAC,IAAD,CACEE,KAAK,OACLgC,EAAG,IACHC,OAAO,UACP3B,iBAAiB,WACjBJ,SAAU,SAACC,GAAD,OAvGE,SAAC+B,GAEnB,GADAN,GAAc,QACDO,IAATD,EAAJ,CAWA,GADAL,QAAQC,IAAII,GACM,eAAdA,EAAKlC,MAAuC,cAAdkC,EAAKlC,KA4BrC,OARA7B,EAAM,CACJU,MAAO,0BACPC,OAAQ,UACRC,SAAU,IACVC,YAAY,EACZC,SAAU,gBAEZ2C,GAAc,GA1Bd,IAAMtC,EAAO,IAAI8C,SACjB9C,EAAK+C,OAAO,OAAQH,GACpB5C,EAAK+C,OAAO,gBAAiB,YAC7B/C,EAAK+C,OAAO,aAAc,cAC1BC,MAAM,0DAA2D,CAC/DC,OAAQ,OACRC,KAAMlD,IAELmD,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACnD,GACLoC,EAAOpC,EAAKsD,IAAIC,YAChBhB,QAAQC,IAAIxC,EAAKsD,IAAIC,YACrBjB,GAAc,MAEfkB,OAAM,SAACC,GACNlB,QAAQC,IAAIiB,GACZnB,GAAc,WA3BlBzD,EAAM,CACJU,MAAO,0BACPC,OAAQ,UACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WA+FS+D,CAAY7C,EAAEC,OAAO6C,MAAM,UAGhD,cAAC,IAAD,CAEExC,GAAG,WACHC,OAAQ,CAACD,GAAG,YACZG,OAAO,OACPJ,MAAM,OACNM,MAAO,CAAEC,UAAW,IACpBF,QAASlC,EACTqC,UAAWW,EACXrB,iBAAiB,WATnB,yBCzGS4C,IC/DXC,EAAQC,ED+DGF,EAvEf,WACE,IAAM7F,EAAUC,uBAChB,EAAkCV,mBAAS,GAA3C,mBAAOyG,EAAP,KAYA,OAZA,KAMA9F,qBAAU,WACKE,KAAKC,MAAMC,aAAaC,QAAQ,cAEnCP,EAAQQ,KAAK,YACtB,CAACR,IAGF,eAAC,IAAD,CAAWiG,UAAU,OAAOC,KAAK,KAAKC,eAAa,EAAnD,UACE,cAAC,IAAD,CAEEC,EAAE,OACFC,eAAe,SACf1B,EAAG,EACHvB,GAAG,WACHkD,EAAE,OACFC,EAAE,gBACFC,aAAa,KACbC,YAAY,MACZzD,YAAY,WACZ0D,UAAU,QACVC,WAAW,QAZb,SAeE,cAAC,IAAD,CAAOC,SAAS,MAAMC,WAAW,UAAUzD,GAAG,GAA9C,yBAIF,cAAC,IAAD,CAAKA,GAAG,WAAWkD,EAAE,OAAO3B,EAAG,EAAG6B,aAAa,KAAKC,YAAY,MAAMzD,YAAa,iBAAnF,SACE,eAAC,IAAD,CAAM8D,UAAQ,EAAClD,QAAQ,eAAvB,UACE,eAAC,IAAD,CAASmD,GAAG,MAAZ,UAGE,cAAC,IAAD,CACAxD,OAAO,OACLH,GAAkB,IAAd4C,EAAkB,WAAa,WACnCxD,MAAM,QACNwE,UAAW,CAAE5D,GAAI,WAAYZ,MAAO,SAJtC,mBAQA,cAAC,IAAD,CACAe,OAAO,OACLH,GAAkB,IAAd4C,EAAkB,WAAa,WACnCxD,MAAM,QACNwE,UAAW,CAAE5D,GAAI,WAAYZ,MAAO,SAJtC,wBASF,eAAC,IAAD,WACE,eAAC,IAAD,eACE,cAAC,EAAD,OAEF,cAAC,IAAD,UACE,cAAC,EAAD,kB,2CE9EDyE,EAAqB,SAACC,EAAUX,EAAGY,EAAGC,GAGjD,OACED,EAAID,EAASG,OAAS,GACtBH,EAASC,EAAI,GAAGG,OAAOC,MAAQhB,EAAEe,OAAOC,KACxCL,EAASC,GAAGG,OAAOC,MAAQH,EAEpB,GAEND,EAAID,EAASG,OAAS,GACrBH,EAASC,EAAI,GAAGG,OAAOC,MAAQhB,EAAEe,OAAOC,KACxCL,EAASC,GAAGG,OAAOC,MAAQH,GAC5BD,IAAMD,EAASG,OAAS,GAAKH,EAASC,GAAGG,OAAOC,MAAQH,EAElD,EACG,QAGDI,EAAe,SAACN,EAAUX,EAAGY,EAAGC,GAC3C,OACED,EAAID,EAASG,OAAS,IACrBH,EAASC,EAAI,GAAGG,OAAOC,MAAQhB,EAAEe,OAAOC,UACRzC,IAA/BoC,EAASC,EAAI,GAAGG,OAAOC,MACzBL,EAASC,GAAGG,OAAOC,MAAQH,GAIlBK,EAAgB,SAACP,EAAUC,EAAGC,GACzC,OACED,IAAMD,EAASG,OAAS,GACxBH,EAASA,EAASG,OAAS,GAAGC,OAAOC,MAAQH,GAC7CF,EAASA,EAASG,OAAS,GAAGC,OAAOC,KAI5BG,EAAa,SAACR,EAAUX,EAAGY,GACtC,OAAOA,EAAI,GAAKD,EAASC,EAAI,GAAGG,OAAOC,MAAQhB,EAAEe,OAAOC,KAG7CI,EAAY,SAACC,EAAYC,GAAW,IAAD,EAC9C,OAAO,UAAAA,EAAM,UAAN,eAAUN,QAAV,OAAkBK,QAAlB,IAAkBA,OAAlB,EAAkBA,EAAYL,KAAMM,EAAM,GAAG7D,KAAO6D,EAAM,GAAG7D,M,qDCyBvD8D,EAlDM,SAAC,GAAwB,IAAtBpI,EAAqB,EAArBA,KAAMJ,EAAe,EAAfA,SAC5B,EAAoCyI,cAA5BC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,OAAQC,EAAxB,EAAwBA,QAExB,OACE,qCACG5I,EACC,sBAAMkE,QAASyE,EAAf,SAAwB3I,IAExB,cAAC,IAAD,CAAY8G,EAAG,CAAE+B,KAAM,QAAUC,KAAM,cAACC,EAAA,EAAD,IAAc7E,QAASyE,IAEhE,eAAC,IAAD,CAAO/E,KAAK,KAAKgF,QAASA,EAASF,OAAQA,EAAQM,YAAU,EAA7D,UACE,cAAC,IAAD,IACA,eAAC,IAAD,CAAchF,EAAE,QAAQ2C,UAAU,YAAY7C,GAAG,WAAjD,UACE,cAAC,IAAD,CACEwD,SAAS,OACTC,WAAW,YACXT,EAAE,OACFC,eAAe,SAJjB,SAMG3G,EAAKsE,OAER,cAAC,IAAD,IACA,eAAC,IAAD,CACEoC,EAAE,OACFmC,QAAQ,SACRC,WAAW,SACXnC,eAAe,gBAJjB,UAME,cAAC,IAAD,CACEG,aAAa,OACbiC,QAAQ,QACRC,IAAKhJ,EAAK0E,IACVuE,IAAKjJ,EAAKsE,OAEZ,eAAC,IAAD,CACE4C,SAAU,CAAEuB,KAAM,OAAQS,GAAI,QAC9B/B,WAAW,YAFb,oBAIUnH,EAAKsB,YAGjB,cAAC,IAAD,UACE,cAAC,IAAD,CAAQoC,GAAG,WAAWZ,MAAM,iBAAiBa,OAAQ,CAACD,GAAG,YAAaG,OAAO,OAAOC,QAAS0E,EAA7F,+B,2BCNGW,EAzCQ,SAAC,GAAkB,IAAhB3B,EAAe,EAAfA,SAChBxH,EAASP,IAATO,KAER,OACE,cAAC,IAAD,UACGwH,GACCA,EAAS4B,KAAI,SAACvC,EAAGY,GAAJ,OACX,sBAAK1D,MAAO,CAAEsF,QAAS,QAAvB,WACIvB,EAAaN,EAAUX,EAAGY,EAAGzH,EAAK6H,MAClCE,EAAcP,EAAUC,EAAGzH,EAAK6H,OAChC,cAAC,IAAD,CAASyB,MAAOzC,EAAEe,OAAOtD,KAAMiF,UAAU,eAAeC,UAAQ,EAAhE,SACE,cAAC,IAAD,CACEC,GAAG,MACHC,GAAI,EACJlG,KAAK,KACLmG,OAAO,UACPrF,KAAMuC,EAAEe,OAAOtD,KACf0E,IAAKnC,EAAEe,OAAOlD,QAIpB,sBACEX,MAAO,CACL6F,gBAAgB,GAAD,OACb/C,EAAEe,OAAOC,MAAQ7H,EAAK6H,IAAM,UAAY,WAE1CgC,WAAYtC,EAAmBC,EAAUX,EAAGY,EAAGzH,EAAK6H,KACpD7D,UAAWgE,EAAWR,EAAUX,EAAGY,EAAGzH,EAAK6H,KAAO,EAAI,GACtDf,aAAc,OACdgD,QAAS,WACTC,SAAU,OATd,SAYGlD,EAAEmD,YA1B+BnD,EAAEgB,W,kFCMnCoC,GArBO,SAAC,GAAqC,IAAnCjK,EAAkC,EAAlCA,KAAMkK,EAA4B,EAA5BA,eAAgBC,EAAY,EAAZA,MAC7C,OACE,eAAC,KAAD,CACEC,GAAI,EACJC,GAAI,EACJvD,aAAa,KACbD,EAAG,EACHQ,GAAI,EACJnD,QAAQ,QACRgD,SAAU,GACV/C,YAAY,SACZwF,OAAO,UACP7F,QAASoG,EAVX,UAYGlK,EAAKsE,KACL6F,IAAUnK,EAAK6H,KAAO,4CACvB,cAACyC,GAAA,EAAD,CAAWC,GAAI,QC0BNC,GAzCM,SAAC,GAA6B,IAA3BN,EAA0B,EAA1BA,eAAelK,EAAW,EAAXA,KAIrC,OADC8E,QAAQC,IAAI,QAAQ/E,GAEnB,eAAC,IAAD,CACE8D,QAASoG,EACTP,OAAO,UAEPjG,GAAG,MACHC,OAAQ,CACN8G,WAAY,UACZ3H,MAAO,SAET8D,EAAE,OACFF,EAAE,OACFoC,WAAW,SACXhG,MAAM,QACNsH,GAAI,EACJC,GAAI,EACJhD,GAAI,EACJP,aAAa,KAhBf,UAkBE,cAAC,IAAD,CACE4C,GAAI,EACJlG,KAAK,KACLmG,OAAO,UACPrF,KAAMtE,EAAKsE,KACX0E,IAAKhJ,EAAK0E,MAEZ,eAAC,IAAD,WACE,cAAC,IAAD,UAAO1E,EAAKsE,OACZ,eAAC,IAAD,CAAM4C,SAAS,KAAf,UACE,yCACClH,EAAKsB,gBC0PDoJ,GAxQc,SAAC,GAAkD,IAAhDC,EAA+C,EAA/CA,cAAeC,EAAgC,EAAhCA,WAAYC,EAAoB,EAApBA,cACzD,EAAoCxC,cAA5BC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,OAAQC,EAAxB,EAAwBA,QACxB,EAA0C3I,qBAA1C,mBAAOiL,EAAP,KAAsBC,EAAtB,KACA,EAA4BlL,mBAAS,IAArC,mBAAOmL,EAAP,KAAeC,EAAf,KACA,EAAwCpL,mBAAS,IAAjD,mBAAOqL,EAAP,KAAqBC,EAArB,KACA,EAA8BtL,oBAAS,GAAvC,mBAAO6B,EAAP,KAAgBC,EAAhB,KACA,EAA0C9B,oBAAS,GAAnD,mBAAOuL,EAAP,KAAsBC,EAAtB,KACMjK,EAAQC,cAEd,EAAgD5B,IAAxCK,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,gBAAiBC,EAAvC,EAAuCA,KAEjCsL,EAAY,uCAAG,WAAOC,GAAP,mBAAA1J,EAAA,yDACnBoJ,EAAUM,GACLA,EAFc,iEAOjB5J,GAAW,GACLQ,EAAS,CACbC,QAAS,CACPoJ,cAAc,UAAD,OAAYxL,EAAKyL,SAVjB,SAaMpJ,IAAMqJ,IAAN,2BAA8BV,GAAU7I,GAb9C,gBAaTI,EAbS,EAaTA,KACRuC,QAAQC,IAAIxC,GACZZ,GAAW,GACXwJ,EAAgB5I,GAhBC,kDAkBjBnB,EAAM,CACJU,MAAO,iBACPY,YAAa,oCACbX,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,gBAEZP,GAAW,GA1BM,0DAAH,sDA8BZgK,EAAY,uCAAG,gCAAA9J,EAAA,yDACdiJ,EADc,iEAIjBO,GAAiB,GACXlJ,EAAS,CACbC,QAAS,CACPoJ,cAAc,UAAD,OAAYxL,EAAKyL,SAPjB,SAUMpJ,IAAMuJ,IAAN,mBAErB,CACEC,OAAQ/L,EAAa+H,IACrBiE,SAAUhB,GAEZ3I,GAhBe,gBAUTI,EAVS,EAUTA,KASRuC,QAAQC,IAAIxC,EAAKsF,KAEjB9H,EAAgBwC,GAChBsI,GAAeD,GACfS,GAAiB,GAvBA,kDAyBjBjK,EAAM,CACJU,MAAO,iBACPY,YAAa,KAAMC,SAASJ,KAAKK,QACjCb,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAEZmJ,GAAiB,GAjCA,QAmCnBN,EAAiB,IAnCE,0DAAH,qDAsCZgB,EAAa,uCAAG,WAAOC,GAAP,iBAAAnK,EAAA,0DAChB/B,EAAaqI,MAAM8D,MAAK,SAACC,GAAD,OAAOA,EAAErE,MAAQmE,EAAMnE,OAD/B,uBAElBzG,EAAM,CACJU,MAAO,yBACPC,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAPM,6BAYhBpC,EAAaqM,WAAWtE,MAAQ7H,EAAK6H,IAZrB,uBAalBzG,EAAM,CACJU,MAAO,+BACPC,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAlBM,0CAwBlBP,GAAW,GACLQ,EAAS,CACbC,QAAS,CACPoJ,cAAc,UAAD,OAAYxL,EAAKyL,SA3BhB,UA8BCpJ,IAAMuJ,IAAN,6BACK9L,EAAa+H,IADlB,YACyBmE,EAAMnE,KAChD,GACA1F,GAjCgB,QAmCD,OALX6C,EA9BY,QAmCVjD,QACNX,EAAM,CACJU,MAAO,YACPY,YAAa,oCACbX,OAAQ,UACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAGd4C,QAAQC,IAAI,OAAOC,GAGnBrD,GAAW,GAhDO,kDAkDlBP,EAAM,CACJU,MAAO,iBACPY,YAAa,KAAMC,SAASJ,KAAKK,QACjCb,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAEZP,GAAW,GA1DO,QA4DpBoJ,EAAiB,IA5DG,0DAAH,sDA+DbqB,EAAY,uCAAG,WAAOJ,GAAP,mBAAAnK,EAAA,yDACf/B,EAAaqM,WAAWtE,MAAQ7H,EAAK6H,KAAOmE,EAAMnE,MAAQ7H,EAAK6H,IADhD,uBAEjBzG,EAAM,CACJU,MAAO,kCACPC,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAPK,0CAajBP,GAAW,GACLQ,EAAS,CACbC,QAAS,CACPoJ,cAAc,UAAD,OAAYxL,EAAKyL,SAhBjB,SAmBMpJ,IAAMuJ,IAAN,wBAErB,CACEC,OAAQ/L,EAAa+H,IACrBH,OAAQsE,EAAMnE,KAEhB1F,GAzBe,gBAmBTI,EAnBS,EAmBTA,KASRyJ,EAAMnE,MAAQ7H,EAAK6H,IAAM9H,IAAoBA,EAAgBwC,GAC7DsI,GAAeD,GACfD,IACAhJ,GAAW,GA/BM,kDAiCjBP,EAAM,CACJU,MAAO,iBACPY,YAAa,KAAMC,SAASJ,KAAKK,QACjCb,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAEZP,GAAW,GAzCM,QA2CnBoJ,EAAiB,IA3CE,0DAAH,sDA8ClB,OACE,qCACE,cAAC,IAAD,CAAYrE,EAAG,CAAE+B,KAAM,QAAUC,KAAM,cAACC,EAAA,EAAD,IAAc7E,QAASyE,IAE9D,eAAC,IAAD,CAAOC,QAASA,EAASF,OAAQA,EAAQM,YAAU,EAAnD,UACE,cAAC,IAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CACE1B,SAAS,OACTC,WAAW,YACXT,EAAE,OACFC,eAAe,SAJjB,SAMG7G,EAAagM,WAGhB,cAAC,IAAD,IACA,eAAC,IAAD,CAAWpF,EAAE,OAAOmC,QAAQ,SAASC,WAAW,SAAhD,UACE,cAAC,IAAD,CAAKlC,EAAE,OAAOF,EAAE,OAAO2F,SAAS,OAAOC,GAAI,EAA3C,SACGxM,EAAaqI,MAAMiB,KAAI,SAAC8C,GAAD,OACtB,cAAC,GAAD,CAEElM,KAAMkM,EACN/B,MAAOrK,EAAaqM,WACpBjC,eAAgB,kBAAMkC,EAAaF,KAH9BA,EAAErE,UAOb,eAAC,IAAD,CAAanB,EAAE,OAAf,UACE,cAAC,IAAD,CACExD,YAAY,YACZmE,GAAI,EACJrG,MAAO8J,EACP3H,SAAU,SAACC,GAAD,OAAO2H,EAAiB3H,EAAEC,OAAOrC,UAE7C,cAAC,IAAD,CACEkD,QAAQ,QACRC,YAAY,OACZoI,GAAI,EACJtI,UAAWmH,EACXtH,QAAS6H,EALX,uBAUF,cAAC,IAAD,UACE,cAAC,IAAD,CACEzI,YAAY,oBACZmE,GAAI,EACJlE,SAAU,SAACC,GAAD,OAAOkI,EAAalI,EAAEC,OAAOrC,YAI1CU,EACC,cAAC,IAAD,CAAS8B,KAAK,OADR,OAGN0H,QAHM,IAGNA,OAHM,EAGNA,EAAc9B,KAAI,SAACpJ,GAAD,OAChB,cAAC,GAAD,CAEEA,KAAMA,EACNkK,eAAgB,kBAAM6B,EAAc/L,KAF/BA,EAAK6H,WAOlB,cAAC,IAAD,UACE,cAAC,IAAD,CAAQ/D,QAAS,kBAAMsI,EAAapM,IAAOmE,YAAY,MAAvD,qCClRGqI,GAFahN,0B,oBCiNbiN,GA1Ma,SAAC,GAAmC,IAAlCC,EAAiC,EAAjCA,YAAYlF,EAAqB,EAArBA,SAASpB,EAAY,EAAZA,OACjD,EAAwBvG,mBAAS,GAAjC,mBAAO8M,EAAP,KAAaC,EAAb,KACA,EAA4B/M,mBAAS,GAArC,mBAAOgN,EAAP,KAAeC,EAAf,KACM1L,EAAQC,cACd,EAAuBxB,mBAAS,IAAhC,mBAAOkN,EAAP,KAAYC,EAAZ,KACA,EAAkCnN,mBAAS,IAA3C,mBAAOoN,EAAP,KAAkBC,EAAlB,KACA,EAA8BzN,IAAtBK,EAAR,EAAQA,aAAcE,EAAtB,EAAsBA,KAEfmN,EADYzN,qBAAW8M,IACvBW,mBA0CDC,EAAc,uCAAG,kCAAAvL,EAAA,6DACrBT,EAAM,CACJU,MAAO,YACPY,YAAa,gCACbX,OAAQ,UACRC,SAAU,IACVC,YAAY,IAEdkL,GAAmB,GARE,SAadE,EAAgBN,EAAK,IAAIJ,EAAK,IAAIE,EAAlBE,MACpBjI,QAAQC,IAAI,OAAOsI,GACdlL,EAAS,CACbC,QAAS,CACP,eAAgB,mBAChBoJ,cAAc,UAAD,OAAYxL,EAAKyL,SAGlCyB,EAAc,IArBK,SAsBI7K,IAAMC,KAC3B,eACA,CACE0H,QAASiD,EACTpB,OAAQ/L,EACRuN,cAAcA,GAEhBlL,GA7BiB,gBAsBXI,EAtBW,EAsBXA,KAUR6D,EAAOkH,KAAK,cAAe/K,GAC3BmK,EAAY,GAAD,mBAAKlF,GAAL,CAAejF,KAjCP,kDAoCnBnB,EAAM,CACJU,MAAO,SACPY,YAAa,gBACbX,OAAQ,QACRC,SAAU,IACVC,YAAY,IAzCK,0DAAH,qDAgDpB,OACE,eAAC,IAAD,CACEsL,UAAU,aACVzD,QAAQ,MACR5H,SAAS,WACTsL,UAAU,sBACVC,MAAM,MACNC,QAAQ,QACRC,OAAO,OACPlK,MAAM,OACNqD,aAAa,OACb8G,aAAa,IAVf,UAYE,eAAC,IAAD,CAAKvE,QAAQ,OAAb,UACE,cAAC,IAAD,CACEwE,GAAIC,KACJH,OAAO,MACPlK,MAAM,MACNX,MAAM,QACNiL,OAAO,kBACPjH,aAAa,OACb8C,gBAAgB,QAChBC,WAAW,MACXmE,YAAY,QAEd,cAAC,IAAD,oCAEF,cAAC,IAAD,CAAMhK,UAAU,MAAM6F,WAAW,MAAjC,qBAGA,cAAC,IAAD,CACA1G,SAlCoB,SAACC,GACvB8J,EAAc9J,EAAEC,OAAOrC,QAkCnBgD,UAAU,MACV+J,OAAO,kBACP7K,YAAY,mBAEd,cAAC,IAAD,CAAOD,KAAK,OAAOE,SAzFE,SAACC,GACxB4J,EAAQ5J,EAAEC,OAAOrC,OACjB8D,QAAQC,IAAI,OAAO3B,EAAEC,OAAOrC,QAuFsBgD,UAAU,QAC1D,eAAC,IAAD,CAAKqF,QAAQ,OAAO4E,QAAQ,QAAQjK,UAAU,MAA9C,UACE,cAAC,IAAD,CACE+J,OAAO,kBACPP,UAAU,mBACVG,OAAO,MACPlK,MAAM,MACNvB,SAAS,WACTwL,QAAQ,QACR5G,aAAa,OACboH,KAAK,MACLC,IAAI,QAEN,cAAC,IAAD,CACEJ,OAAO,kBACPP,UAAU,mBACVG,OAAO,MACPlK,MAAM,MACNvB,SAAS,WACTwL,QAAQ,QACR5G,aAAa,OACboH,KAAK,MACLC,IAAI,QAEN,eAAC,IAAD,CACEJ,OAAO,iBACPjH,aAAa,OACb6G,OAAO,OACPlK,MAAM,OACNoG,WAAW,MALb,UAOE,cAAC,IAAD,CAAM8D,OAAO,MAAMzG,SAAS,MAAMkH,UAAU,SAA5C,SACGzB,IAEH,eAAC,IAAD,CAAKtD,QAAQ,OAAO1C,eAAe,SAAnC,UACE,cAAC0H,GAAA,EAAD,CAAenH,SAAS,MAAMyC,OAAO,UAAU7F,QAhKpC,WAEf8I,EADDD,EAAK,GAAG,GACCA,EAAK,EAEL,MA6JJ,cAAC2B,GAAA,EAAD,CAAiB3E,OAAO,UAAUzC,SAAS,MAAMpD,QA1JtC,WAEf8I,EADDD,EAAK,GAAG,EACCA,EAAK,EAEL,aAyJR,eAAC,IAAD,CACEoB,OAAO,iBACPjH,aAAa,OACb6G,OAAO,OACPlK,MAAM,OAJR,UAME,cAAC,IAAD,CAAMkK,OAAO,MAAMzG,SAAS,MAAMkH,UAAU,SAA5C,SACGvB,IAEH,eAAC,IAAD,CAAKxD,QAAQ,OAAO1C,eAAe,SAAnC,UACE,cAAC0H,GAAA,EAAD,CAAenH,SAAS,MAAMpD,QAhKjB,WAEjBgJ,EADDD,EAAO,GAAG,GACCA,EAAO,EAEP,IA4JmDlD,OAAO,YAChE,cAAC2E,GAAA,EAAD,CAAiBpH,SAAS,MAAMpD,QA1JnB,WAEjBgJ,EADDD,EAAO,GAAG,EACCA,EAAO,EAEP,KAsJoDlD,OAAO,qBAIvE,cAAC,IAAD,CAAQ7F,QAvJe,WACzBqJ,GAAmB,GACnBrI,QAAQC,IAAI,4BAqJ2BZ,YAAY,MAAMoK,MAAM,QAAQvK,UAAU,MAA/E,oBACA,cAAC,IAAD,CACAF,QAASsJ,EACPmB,MAAM,QACNP,YAAY,MACZ7J,YAAY,SACZH,UAAU,MALZ,sB,oBRqLSwK,GAjWI,SAAC,GAAmC,IAAjC5D,EAAgC,EAAhCA,WAAYC,EAAoB,EAApBA,cAChC,EAAgChL,mBAAS,IAAzC,mBAAO2H,EAAP,KAAiBkF,EAAjB,KACA,EAA8B7M,oBAAS,GAAvC,mBAAO6B,EAAP,KAAgBC,EAAhB,KACA,EAAoC9B,mBAAS,IAA7C,mBAAOoN,EAAP,KAAmBC,EAAnB,KACA,EAA8CrN,oBAAS,GAAvD,mBAAO4O,EAAP,KAAwBC,EAAxB,KACA,EAA4B7O,oBAAS,GAArC,mBAAO8O,EAAP,KAAeC,EAAf,KACA,EAAgC/O,oBAAS,GAAzC,mBAAOgP,EAAP,KAAiBC,EAAjB,KACMC,EAAcrP,qBAAW8M,IACxBwC,EAAsCD,EAAtCC,gBAAgB7B,EAAsB4B,EAAtB5B,mBACvB,EAAgDtN,oBAAS,GAAzD,oBAAOoP,GAAP,MAAyBC,GAAzB,MAEM9N,GAAQC,cAER8N,GAAiB,CACrBC,MAAM,EACNC,UAAU,EACVC,cAAeA,GACfC,iBAAkB,CAChBC,oBAAqB,mBAGzB,GACE/P,IADMK,GAAR,GAAQA,aAAcC,GAAtB,GAAsBA,gBAAiBC,GAAvC,GAAuCA,KAAME,GAA7C,GAA6CA,aAAcC,GAA3D,GAA2DA,gBAGrDwK,GAAa,uCAAG,gCAAA9I,EAAA,yDACf/B,GADe,iEAIZqC,EAAS,CACbC,QAAS,CACPoJ,cAAc,UAAD,OAAYxL,GAAKyL,SAIlC9J,GAAW,GAVO,SAYKU,IAAMqJ,IAAN,uBACL5L,GAAa+H,KAC7B1F,GAdgB,gBAYVI,EAZU,EAYVA,KAIRmK,EAAYnK,GACZZ,GAAW,GAEXyE,EAAOkH,KAAK,YAAaxN,GAAa+H,KAnBpB,kDAqBlBzG,GAAM,CACJU,MAAO,iBACPY,YAAa,8BACbX,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WA3BM,0DAAH,qDAgCbuN,GAAW,uCAAG,WAAOC,GAAP,mBAAA7N,EAAA,yDACD,SAAb6N,EAAMC,MAAkB1C,EADV,wBAEhB7G,EAAOkH,KAAK,cAAexN,GAAa+H,KAFxB,SAIR1F,EAAS,CACbC,QAAS,CACP,eAAgB,mBAChBoJ,cAAc,UAAD,OAAYxL,GAAKyL,SAGlCyB,EAAc,IAVA,SAWS7K,IAAMC,KAC3B,eACA,CACE0H,QAASiD,EACTpB,OAAQ/L,IAEVqC,GAjBY,gBAWNI,EAXM,EAWNA,KAQRuC,QAAQC,IAAI,eAAejF,IAC3BsG,EAAOkH,KAAK,cAAe/K,GAC3BmK,EAAY,GAAD,mBAAKlF,GAAL,CAAejF,KArBZ,kDAuBdnB,GAAM,CACJU,MAAO,iBACPY,YAAa,6BACbX,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WA7BE,0DAAH,sDAkCXkL,GAAc,uCAAG,gCAAAvL,EAAA,sEAEbM,EAAS,CACbC,QAAS,CACP,eAAgB,mBAChBoJ,cAAc,UAAD,OAAYxL,GAAKyL,SAGlCyB,EAAc,IARK,SASI7K,IAAMC,KAC3B,eACA,CACE0H,QAASiD,EACTpB,OAAQ/L,IAEVqC,GAfiB,gBASXI,EATW,EASXA,KAQR6D,EAAOkH,KAAK,cAAe/K,GAC3BmK,EAAY,GAAD,mBAAKlF,GAAL,CAAejF,KAlBP,kDAoBnBnB,GAAM,CACJU,MAAO,iBACPY,YAAa,6BACbX,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WA1BO,0DAAH,qDA8BpB1B,qBAAU,YACR4F,EAASwJ,KA5HI,0BA6HNtC,KAAK,QAAStN,IACrBoG,EAAOyJ,GAAG,aAAa,kBAAMnB,GAAmB,MAChDtI,EAAOyJ,GAAG,UAAU,kBAAMf,GAAY,MACtC1I,EAAOyJ,GAAG,eAAe,kBAAMf,GAAY,QAG1C,IAEHtO,qBAAU,WACRmK,KAEAtE,EAAsBvG,KAErB,CAACA,KAEJU,qBAAU,WACR4F,EAAOyJ,GAAG,oBAAoB,SAACC,GAE1BzJ,GACDA,EAAoBwB,MAAQiI,EAAmBC,KAAKlI,IAOpD6E,EAAY,GAAD,mBAAKlF,GAAL,CAAesI,KALrB5P,GAAa8P,SAASF,KACzB3P,GAAgB,CAAC2P,GAAF,mBAAyB5P,MACxC2K,GAAeD,UAQvB,ICvI4B1C,GAAYC,GDwKlC8H,GAAYC,iBAAO,MAgBzB,OAdA1P,qBAAU,WACR,IAAM2P,EAAqB,SAACT,GACtBO,GAAUG,UAAYH,GAAUG,QAAQC,SAASX,EAAMrM,SACzD6L,IAAoB,IAMxB,OAFAoB,SAASC,iBAAiB,QAASJ,GAE5B,WACLG,SAASE,oBAAoB,QAASL,MAExC,CAACF,KAGD,mCACGnQ,GACC,qCACE,eAAC,IAAD,CACCyG,UAAU,aACTW,SAAU,CAAEuB,KAAM,OAAQS,GAAI,QAC9BoD,GAAI,EACJlC,GAAI,EACJxD,EAAE,OACFI,UAAU,QACVC,WAAW,OACXwJ,UAAU,SAEVtJ,WAAW,YACXT,EAAE,OAEFC,eAAgB,CAAE8B,KAAM,iBACxBiI,aAAa,SACb5H,WAAW,SAfb,UAiBE,cAAC,IAAD,CAAYvC,UAAU,UAAUzD,MAAM,QACpC4D,EAAG,CAAE+B,KAAM,OAAQS,GAAI,QACvBR,KAAM,cAACiI,EAAA,EAAD,IACN7M,QAAS,kBAAM/D,GAAgB,OAEhCyH,IACG1H,GAAa8Q,YAQb,qCACG9Q,GAAagM,SAAS+E,cACvB,cAAC,GAAD,CACElG,cAAeA,GACfC,WAAYA,EACZC,cAAeA,OAZnB,qCACG5C,EAAUjI,GAAMF,GAAaqI,OAC9B,cAAC,EAAD,CACEnI,MCvNUkI,GDuNUlI,GCvNEmI,GDuNIrI,GAAaqI,MCtNlDA,GAAM,GAAGN,MAAQK,GAAWL,IAAMM,GAAM,GAAKA,GAAM,aDoOlD,eAAC,IAAD,CACE5B,UAAU,gBACVG,EAAE,OACFmC,QAAQ,SACRlC,eAAe,WAEf1B,EAAG,EAIH2B,EAAE,OACFhD,EAAE,OACFkD,aAAa,KACbgK,UAAU,SAbZ,UAeGpP,EACC,cAAC,IAAD,CACE8B,KAAK,KACLoD,EAAG,GACHhD,EAAG,GACHmN,UAAU,SACVC,OAAO,SAGT,qBAAKzK,UAAU,WAAf,SACE,cAAC,EAAD,CAAgBiB,SAAUA,MAI9B,eAAC,IAAD,CACEyJ,UAAWxB,GACX1M,GAAG,aACHC,YAAU,EACVyG,GAAI,EACJ/C,EAAE,OALJ,UAOGmI,EACC,8BACE,cAAC,KAAD,CACEqC,QAAS/B,GAET1L,MAAO,GACPM,MAAO,CAAE6J,aAAc,GAAI/D,WAAY,OAI3C,6BAEF,sBAAKsH,IAAKlB,GAAWlM,MAAO,CAAEsF,QAAS,OAAQP,WAAW,SAAS5G,SAAU,YAA7E,UACE,wBAAQqE,UAAU,aAAazC,QAtHjB,WAC1BoL,IAAqBD,KAqHT,0BAICA,IACC,qBAAKlL,MAAO,CACV7B,SAAU,WACVkP,OAAQ,QAFV,SAIE,cAAC,KAAD,CAAQ7O,KAAMA,GAAM8O,QAAQ,OAAOC,cA3HxB,SAACC,GAC5BrE,GAAc,SAACsE,GAAD,OAAiBA,EAAcD,EAAME,kBA+HzC,cAAC,IAAD,CACEvN,QAAQ,SACRR,GAAG,UACHR,YAAY,oBACZJ,MAAM,QACN9B,MAAOiM,EACP9J,SAnKQ,SAACC,GAGrB,GAFA8J,EAAc9J,EAAEC,OAAOrC,OAElByN,EAAL,CAEKE,IACHC,GAAU,GACVxI,EAAOkH,KAAK,SAAUxN,GAAa+H,MAErC,IAAI6J,GAAiB,IAAIC,MAAOC,UAEhCC,YAAW,YACK,IAAIF,MAAOC,UACAF,GAHT,KAIe/C,IAC7BvI,EAAOkH,KAAK,cAAexN,GAAa+H,KACxC+G,GAAU,MANI,OA0JNrL,iBAAiB,eAEnB,cAAC,IAAD,CACAoG,OAAO,UACP7F,QApJiB,WAC3BqJ,GAAmB,IAoJPU,GAAIC,KACJH,OAAO,MACPlK,MAAM,MACNX,MAAM,QACNiL,OAAO,kBACPjH,aAAa,OACb8C,gBAAgB,QAChBC,WAAW,MACXmE,YAAY,QAEd,qBAAKzH,UAAU,cAAczC,QAASsJ,GAAtC,SACE,cAAC0E,EAAA,EAAD,SAIJ9C,GAAiB,cAAC,GAAD,CAAqB5I,OAAQA,EAAQoB,SAAUA,EAAUkF,YAAaA,UAM3F,cAAC,IAAD,CAAKhG,EAAE,OAAOoC,WAAW,SAASnC,eAAe,SAAS/C,EAAE,OAA5D,SACE,cAAC,IAAD,CAAMsD,SAAS,MAAMoF,GAAI,EAAGnF,WAAW,YAAvC,oDS1VK4K,GAnBC,SAAC,GAAmC,IAAjCnH,EAAgC,EAAhCA,WAAYC,EAAoB,EAApBA,cACrB/K,EAAiBL,IAAjBK,aAER,OACE,cAAC,IAAD,CACE4G,EAAG,CAAE+B,KAAM3I,EAAe,OAAS,OAAQoJ,GAAI,QAC/CJ,WAAW,SACXD,QAAQ,SACR5D,EAAG,EACHvB,GAAG,QACHkD,EAAG,CAAE6B,KAAM,OAAQS,GAAI,OACvBpC,aAAa,KACbC,YAAY,MARd,SAUE,cAAC,GAAD,CAAY6D,WAAYA,EAAYC,cAAeA,O,oBCG1CmH,GAnBK,WAClB,OACE,eAAC,IAAD,WACE,cAAC,KAAD,CAAUrE,OAAO,SACjB,cAAC,KAAD,CAAUA,OAAO,SACjB,cAAC,KAAD,CAAUA,OAAO,SACjB,cAAC,KAAD,CAAUA,OAAO,SACjB,cAAC,KAAD,CAAUA,OAAO,SACjB,cAAC,KAAD,CAAUA,OAAO,SACjB,cAAC,KAAD,CAAUA,OAAO,SACjB,cAAC,KAAD,CAAUA,OAAO,SACjB,cAAC,KAAD,CAAUA,OAAO,SACjB,cAAC,KAAD,CAAUA,OAAO,SACjB,cAAC,KAAD,CAAUA,OAAO,SACjB,cAAC,KAAD,CAAUA,OAAO,aC6LRsE,GAxLQ,SAAC,GAAkB,IAAhBrS,EAAe,EAAfA,SACxB,EAAoCyI,cAA5BC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,OAAQC,EAAxB,EAAwBA,QACxB,EAA0C3I,qBAA1C,mBAAOiL,EAAP,KAAsBC,EAAtB,KACA,EAA0ClL,mBAAS,IAAnD,mBAAOqS,EAAP,KAAsBC,EAAtB,KACA,EAA4BtS,mBAAS,IAArC,mBAAOmL,EAAP,KAAeC,EAAf,KACA,EAAwCpL,mBAAS,IAAjD,mBAAOqL,EAAP,KAAqBC,EAArB,KACA,EAA8BtL,oBAAS,GAAvC,mBAAO6B,EAAP,KAAgBC,EAAhB,KACMP,EAAQC,cAEd,EAAkC5B,IAA1BO,EAAR,EAAQA,KAAMI,EAAd,EAAcA,MAAOC,EAArB,EAAqBA,SAiBfiL,EAAY,uCAAG,WAAOC,GAAP,mBAAA1J,EAAA,yDACnBoJ,EAAUM,GACLA,EAFc,iEAOjB5J,GAAW,GACLQ,EAAS,CACbC,QAAS,CACPoJ,cAAc,UAAD,OAAYxL,EAAKyL,SAVjB,SAaMpJ,IAAMqJ,IAAN,2BAA8BV,GAAU7I,GAb9C,gBAaTI,EAbS,EAaTA,KACRuC,QAAQC,IAAIxC,GACZZ,GAAW,GACXwJ,EAAgB5I,GAhBC,kDAkBjBnB,EAAM,CACJU,MAAO,iBACPY,YAAa,oCACbX,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,gBAxBK,0DAAH,sDAiCZkQ,EAAY,uCAAG,gCAAAvQ,EAAA,yDACnBF,GAAW,GACNmJ,GAAkBoH,EAFJ,uBAGjB9Q,EAAM,CACJU,MAAO,6BACPC,OAAQ,UACRC,SAAU,IACVC,YAAY,EACZC,SAAU,QARK,0CAcXC,EAAS,CACbC,QAAS,CACPoJ,cAAc,UAAD,OAAYxL,EAAKyL,SAhBjB,SAmBMpJ,IAAMC,KAAN,kBAErB,CACEgC,KAAMwG,EACN3C,MAAOzH,KAAK+B,UAAUyP,EAAc9I,KAAI,SAAC8C,GAAD,OAAOA,EAAErE,SAEnD1F,GAzBe,gBAmBTI,EAnBS,EAmBTA,KAQRlC,EAAS,CAACkC,GAAF,mBAAWnC,KACnBoI,IACApH,EAAM,CACJU,MAAO,0BACPC,OAAQ,UACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAlCK,kDAqCjBd,EAAM,CACJU,MAAO,6BACPY,YAAa,KAAMC,SAASJ,KAC5BR,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WA3CK,QA8CnBP,GAAW,GA9CQ,0DAAH,qDAiDlB,OACE,qCACE,sBAAMmC,QAASyE,EAAf,SAAwB3I,IAExB,eAAC,IAAD,CAAO4I,QAASA,EAASF,OAAQA,EAAQM,YAAU,EAAnD,UACE,cAAC,IAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CACE1B,SAAS,OACTC,WAAW,YACXT,EAAE,OACFC,eAAe,SAJjB,+BAQCjF,GACC,cAAC,IAAD,CACAsP,OAAO,OACLqB,UAAU,MACVC,MAAM,QACNC,WAAW,WACXzP,MAAM,WACNU,KAAK,OAGT,cAAC,IAAD,IACA,eAAC,IAAD,CAAWkD,EAAE,OAAOmC,QAAQ,SAASC,WAAW,SAAhD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CACE5F,YAAY,YACZmE,GAAI,EACJlE,SAAU,SAACC,GAAD,OAAO2H,EAAiB3H,EAAEC,OAAOrC,YAG/C,cAAC,IAAD,UACE,cAAC,IAAD,CACEkC,YAAY,mCACZmE,GAAI,EACJlE,SAAU,SAACC,GAAD,OAAOkI,EAAalI,EAAEC,OAAOrC,YAG3C,cAAC,IAAD,CAAK4F,EAAE,OAAOF,EAAE,OAAO2F,SAAS,OAAhC,SACG6F,EAAc9I,KAAI,SAAC8C,GAAD,OACjB,cAAC,GAAD,CAEElM,KAAMkM,EACNhC,eAAgB,kBAnGVsI,EAmG6BtG,OAlGjDiG,EAAiBD,EAAcO,QAAO,SAACC,GAAD,OAASA,EAAI7K,MAAQ2K,EAAQ3K,QADhD,IAAC2K,IAiGDtG,EAAErE,UAMZnG,EAEC,4CAFM,OAINwJ,QAJM,IAINA,OAJM,EAINA,EACIyH,MAAM,EAAG,GACVvJ,KAAI,SAACpJ,GAAD,OACH,cAAC,GAAD,CAEEA,KAAMA,EACNkK,eAAgB,kBA7Jb0I,EA6J+B5S,OA5J9CkS,EAAclC,SAAS4C,GACzBxR,EAAM,CACJU,MAAO,qBACPC,OAAQ,UACRC,SAAU,IACVC,YAAY,EACZC,SAAU,QAKdiQ,EAAiB,GAAD,mBAAKD,GAAL,CAAoBU,MAZlB,IAACA,IA2JE5S,EAAK6H,WAOpB,cAAC,IAAD,UACE,cAAC,IAAD,CAAQ/D,QAASsO,EAAcjO,YAAY,OAA3C,qCCnEG0O,GAtHC,SAAC,GAAoB,IAAlBjI,EAAiB,EAAjBA,WACjB,EAAoC/K,qBAApC,mBAAOqI,EAAP,KAAmB4K,EAAnB,KAEA,EAAiErT,IAAzDK,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,gBAAiBC,EAAvC,EAAuCA,KAAMI,EAA7C,EAA6CA,MAAOC,EAApD,EAAoDA,SAE9Ce,EAAQC,cAER0R,EAAU,uCAAG,8BAAAlR,EAAA,sEAGTM,EAAS,CACbC,QAAS,CACPoJ,cAAc,UAAD,OAAYxL,EAAKyL,SALnB,SASIpJ,IAAMqJ,IAAI,YAAavJ,GAT3B,OAST6C,EATS,OAUf3E,EAAS2E,EAAKzC,MAVC,gDAYfnB,EAAM,CACJU,MAAO,iBACPY,YAAa,2BACbX,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,gBAlBG,yDAAH,qDA6BhB,OANA1B,qBAAU,WACRsS,EAAcpS,KAAKC,MAAMC,aAAaC,QAAQ,cAC9CkS,MAEC,CAACnI,IAGF,eAAC,IAAD,CAAKrE,UAAU,YACbG,EAAG,CAAE+B,KAAM3I,EAAe,OAAS,OAAQoJ,GAAI,QAC/CL,QAAQ,SACRC,WAAW,SACX7D,EAAG,EAEH2B,EAAG,CAAE6B,KAAM,OAAQS,GAAI,OACvBpC,aAAa,KACbC,YAAY,MARd,UAUE,eAAC,IAAD,CACEuF,GAAI,EACJlC,GAAI,EACJlD,SAAU,CAAEuB,KAAM,OAAQS,GAAI,QAC9B/B,WAAW,YACXT,EAAE,OACFE,EAAE,OACFD,eAAe,gBACfmC,WAAW,SACXhG,MAAM,QATR,qBAYE,cAAC,GAAD,UACE,cAAC,IAAD,CACE4D,EAAE,OACFQ,SAAU,CAAEuB,KAAM,OAAQS,GAAI,OAAQ8J,GAAI,QAC1CC,UAAW,cAACC,GAAA,EAAD,IACXpQ,MAAM,OAJR,iCAUJ,cAAC,IAAD,CACE4D,EAAE,OACFmC,QAAQ,SACR5D,EAAG,EAEHsB,UAAU,cACVK,EAAE,OACFhD,EAAE,OACFkD,aAAa,KACbgK,UAAU,SATZ,SAWG1Q,EACC,cAAC,IAAD,CAAO0Q,UAAU,SAAjB,SACG1Q,EAAMgJ,KAAI,SAAC2G,GAAD,OACT,eAAC,IAAD,CACEjM,QAAS,kBAAM/D,EAAgBgQ,IAC/BpG,OAAO,UACPjG,GAAI5D,IAAiBiQ,EAAO,UAAY,UACxCjN,MAAOhD,IAAiBiQ,EAAO,QAAU,QACzC3F,GAAI,EACJC,GAAI,EACJvD,aAAa,KAPf,UAUE,cAAC,IAAD,UACIiJ,EAAKa,YAEHb,EAAKjE,SADL7D,EAAUC,EAAY6H,EAAK5H,SAGhC4H,EAAKoD,eACJ,eAAC,IAAD,CAAMjM,SAAS,KAAf,UACE,8BAAI6I,EAAKoD,cAAcvL,OAAOtD,KAA9B,SACCyL,EAAKoD,cAAcnJ,QAAQrC,OAAS,GACjCoI,EAAKoD,cAAcnJ,QAAQoJ,UAAU,EAAG,IAAM,MAC9CrD,EAAKoD,cAAcnJ,aAZtB+F,EAAKlI,UAmBhB,cAAC,GAAD,U,mDC4GKwL,OApMf,WACE,MAA4BxT,mBAAS,IAArC,mBAAOmL,EAAP,KAAeC,EAAf,KACA,EAAwCpL,mBAAS,IAAjD,mBAAOqL,EAAP,KAAqBC,EAArB,KACA,EAA8BtL,oBAAS,GAAvC,mBAAO6B,EAAP,KAAgBC,EAAhB,KACA,EAAsC9B,oBAAS,GAA/C,mBAAOyT,EAAP,KAAoBC,EAApB,KAEA,EAOI9T,IANFM,EADF,EACEA,gBACAC,EAFF,EAEEA,KACAE,EAHF,EAGEA,aACAC,EAJF,EAIEA,gBACAC,EALF,EAKEA,MACAC,EANF,EAMEA,SAGIe,EAAQC,cACd,EAAoCgH,cAA5BC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,OAAQC,EAAxB,EAAwBA,QAClBlI,EAAUC,uBAOV+K,EAAY,uCAAG,gCAAAzJ,EAAA,yDACdmJ,EADc,uBAEjB5J,EAAM,CACJU,MAAO,mCACPC,OAAQ,UACRC,SAAU,IACVC,YAAY,EACZC,SAAU,aAPK,0CAajBP,GAAW,GAELQ,EAAS,CACbC,QAAS,CACPoJ,cAAc,UAAD,OAAYxL,EAAKyL,SAjBjB,SAqBMpJ,IAAMqJ,IAAN,2BAA8BV,GAAU7I,GArB9C,gBAqBTI,EArBS,EAqBTA,KAERZ,GAAW,GACXmD,QAAQC,IAAI,OAAOxC,GACnB4I,EAAgB5I,GAzBC,kDA2BjBnB,EAAM,CACJU,MAAO,iBACPY,YAAa,oCACbX,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,gBAjCK,0DAAH,qDAsCZsR,EAAU,uCAAG,WAAO9L,GAAP,mBAAA7F,EAAA,6DACjBiD,QAAQC,IAAI2C,GADK,SAIf6L,GAAe,GACTpR,EAAS,CACbC,QAAS,CACP,eAAgB,mBAChBoJ,cAAc,UAAD,OAAYxL,EAAKyL,SARnB,SAWQpJ,IAAMC,KAAN,YAAwB,CAAEoF,UAAUvF,GAX5C,gBAWPI,EAXO,EAWPA,KAEHnC,EAAM6L,MAAK,SAACwH,GAAD,OAAOA,EAAE5L,MAAQtF,EAAKsF,QAAMxH,EAAS,CAACkC,GAAF,mBAAWnC,KAC/DL,EAAgBwC,GAChBgR,GAAe,GACf/K,IAhBe,kDAkBfpH,EAAM,CACJU,MAAO,0BACPY,YAAa,KAAME,QACnBb,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,gBAxBG,0DAAH,sDA6BhB,OACE,qCACE,eAAC,IAAD,CACEwE,EAAE,OACFC,eAAe,gBACfmC,WAAW,SACXpF,GAAG,QACHZ,MAAM,QACN8D,EAAE,OACF3B,EAAE,oBACF8B,YAAY,MARd,UAWE,cAAC,IAAD,CAASuC,MAAM,uBAAuBE,UAAQ,EAACD,UAAU,aAAzD,SACE,eAAC,IAAD,CAAQrF,QAAQ,QAAQJ,QAASyE,EAAQ5E,OAAQ,CAACD,GAAG,YAAaG,OAAO,OAAzE,UACE,mBAAG0C,UAAU,kBACb,cAAC,IAAD,CAAMG,EAAG,CAAE+B,KAAM,OAAQS,GAAI,QAAUkB,GAAI,EAA3C,8BAKJ,cAAC,IAAD,CAAMlD,SAAS,MAAMC,WAAW,UAAhC,uBAGA,gCACE,eAAC,KAAD,WACE,eAAC,KAAD,CAAYlC,EAAG,EAAf,UACE,cAAC,KAAD,CACEyO,MAAOxT,EAAayH,OACpBgM,OAAQC,UAAOC,QAEjB,cAACC,GAAA,EAAD,CAAU5M,SAAS,MAAML,EAAG,OAE9B,eAAC,KAAD,CAAU0D,GAAI,EAAd,WACIrK,EAAayH,QAAU,kBACxBzH,EAAakJ,KAAI,SAAC2K,GAAD,OAChB,cAAC,KAAD,CAEEjQ,QAAS,WACP/D,EAAgBgU,EAAMhE,MACtB5P,EAAgBD,EAAauS,QAAO,SAACuB,GAAD,OAAOA,IAAMD,OAJrD,SAOGA,EAAMhE,KAAKa,YAAX,yBACqBmD,EAAMhE,KAAKjE,UADhC,2BAEuB7D,EAAUjI,EAAM+T,EAAMhE,KAAK5H,SAR9C4L,EAAMlM,cAanB,eAAC,KAAD,WACE,cAAC,KAAD,CAAYgG,GAAIoG,IAAQvQ,GAAG,WAAWC,OAAQ,CAACD,GAAG,YAAauP,UAAW,cAAC3E,GAAA,EAAD,IAA1E,SACE,cAAC,IAAD,CACE9K,KAAK,KACLmG,OAAO,UACPrF,KAAMtE,EAAKsE,KACX0E,IAAKhJ,EAAK0E,IACV5B,MAAM,YAGV,eAAC,KAAD,CAAUY,GAAG,WAAb,UACE,eAAC,EAAD,CAAc1D,KAAMA,EAApB,UACE,cAAC,KAAD,CAAU2D,OAAQ,CAACD,GAAG,YAAtB,wBAA0D,OAE5D,cAAC,KAAD,IACA,cAAC,KAAD,CAAUC,OAAQ,CAACD,GAAG,YAAaI,QAzIzB,WACpBlD,aAAasT,WAAW,YACxB5T,EAAQQ,KAAK,MAuIH,gCAMR,eAAC,KAAD,CAAQyI,UAAU,OAAOf,QAASA,EAASF,OAAQA,EAAnD,UACE,cAAC,IAAD,IACA,eAAC,KAAD,WACE,cAAC,IAAD,CAAc6L,kBAAkB,MAAMzQ,GAAG,WAAYZ,MAAM,QAA3D,0BACA,eAAC,IAAD,CAAayD,UAAU,aAAvB,UACE,eAAC,IAAD,CAAKG,EAAE,OAAO4F,GAAI,EAAlB,UACE,cAAC,IAAD,CACEpJ,YAAY,0BACZJ,MAAM,iBACN4G,GAAI,EACJ1I,MAAOgK,EACP7H,SAAU,SAACC,GAAD,OAAO6H,EAAU7H,EAAEC,OAAOrC,UAEtC,cAAC,IAAD,CAAQ8C,QAASwH,EAAjB,mBAED5J,EACC,cAAC,GAAD,IADM,OAGNwJ,QAHM,IAGNA,OAHM,EAGNA,EAAc9B,KAAI,SAACpJ,GAAD,OAChB,cAAC,GAAD,CAEEA,KAAMA,EACNkK,eAAgB,kBAAMsJ,EAAWxT,EAAK6H,OAFjC7H,EAAK6H,QAMfyL,GAAe,cAAC,IAAD,CAAS/G,GAAG,OAAO7F,EAAE,sBCtMlC0N,GAjBE,WACf,MAAoCvU,oBAAS,GAA7C,mBAAO+K,EAAP,KAAmBC,EAAnB,KACQ7K,EAASP,IAATO,KAER,OACE,sBAAK+D,MAAO,CAAEN,MAAO,QAArB,UACGzD,GAAQ,cAAC,GAAD,IACT,eAAC,IAAD,CAAK0G,EAAE,OAAOC,eAAe,gBAAgBC,EAAE,OAAOhD,EAAE,SAASqB,EAAE,OAAnE,UACGjF,GAAQ,cAAC,GAAD,CAAS4K,WAAYA,IAC7B5K,GACC,cAAC,GAAD,CAAS4K,WAAYA,EAAYC,cAAeA,W,UC8D3CwJ,GAzEC,WACd,IAAMjT,EAAQC,cACRf,EAAUC,wBACd,EAAyB+T,uBAAlBzI,EAAP,EAAOA,OAAOnE,EAAd,EAAcA,OACN1H,EAASP,IAATO,KACFuU,EAAa,uCAAE,8BAAA1S,EAAA,6DACjBiD,QAAQC,IAAI,gBAAgB8G,EAAOnE,GADlB,SAITvF,EAAS,CACbC,QAAS,CACPoJ,cAAc,UAAD,OAAYxL,EAAKyL,SANnB,SASIpJ,IAAMuJ,IAAN,6BACKC,EADL,YACenE,GAChC,GACAvF,GAZa,OAST6C,EATS,OAcfF,QAAQC,IAAI,OAAOC,GACF,MAAdA,EAAKjD,QACNX,EAAM,CACJU,MAAO,QACPY,YAAa,wBACbX,OAAQ,UACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAtBC,kDA8Bfd,EAAM,CACJU,MAAO,QACPY,YAAa,uBACbX,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WApCG,QAwCjB5B,EAAQQ,KAAK,KAxCI,0DAAF,qDA0CrB,OACE,cAAC,IAAD,CACEiN,OAAO,kBACPJ,OAAO,OACP7G,aAAa,OACbrD,MAAM,OACNuN,OAAO,OACPtD,QAAQ,QANV,SAQE,eAAC,IAAD,CACEU,UAAU,SACVpK,UAAU,MACVkD,SAAS,WACTD,WAAW,MACXuN,WAAW,mBALb,sDAQE,eAAC,IAAD,CAAKxQ,UAAU,MAAMqF,QAAQ,OAAO4E,QAAQ,MAAMtH,eAAe,SAAjE,UACI,cAAC,IAAD,CAAQ7C,QAASyQ,EAAe5G,OAAO,MAAMlK,MAAM,OAAOU,YAAY,QAAtE,kBACA,cAAC,IAAD,CAAQwJ,OAAO,MAAMlK,MAAM,OAAOU,YAAY,MAA9C,6BCxDGsQ,OAVf,WACE,OACE,sBAAKlO,UAAU,MAAf,UACE,cAAC,QAAD,CAAOmO,KAAK,IAAIC,UAAWxO,EAAUyO,OAAK,IAC1C,cAAC,QAAD,CAAOF,KAAK,SAASC,UAAWP,KAChC,cAAC,QAAD,CAAOM,KAAK,2BAA2BC,UAAWN,SCCzCQ,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBrP,MAAK,YAAkD,IAA/CsP,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,mBCKCO,GATc,SAAC,GAAgB,IAAfzV,EAAc,EAAdA,SAC3B,EAA4CC,oBAAS,GAArD,mBAAOmP,EAAP,KAAuB7B,EAAvB,KACF,OACE,cAAC,GAAoBpM,SAArB,CAA8BC,MAAO,CAACgO,kBAAgB7B,sBAAtD,SACKvN,KCGT0V,IAASC,OACP,cAAC,KAAD,UACE,cAAC,KAAD,UACE,cAAC,EAAD,UACE,cAAC,GAAD,UACE,cAAC,GAAD,YAKRjF,SAASkF,eAAe,SAM1BX,O","file":"static/js/main.f82cdf81.chunk.js","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst ChatContext = createContext();\r\n\r\nconst ChatProvider = ({ children }) => {\r\n  const [selectedChat, setSelectedChat] = useState();\r\n  const [user, setUser] = useState();\r\n  const [notification, setNotification] = useState([]);\r\n  const [chats, setChats] = useState();\r\n\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n    setUser(userInfo);\r\n\r\n    if (!userInfo) history.push(\"/\");\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [history]);\r\n\r\n  return (\r\n    <ChatContext.Provider\r\n      value={{\r\n        selectedChat,\r\n        setSelectedChat,\r\n        user,\r\n        setUser,\r\n        notification,\r\n        setNotification,\r\n        chats,\r\n        setChats,\r\n      }}\r\n    >\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n};\r\n\r\nexport const ChatState = () => {\r\n  return useContext(ChatContext);\r\n};\r\n\r\nexport default ChatProvider;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nconst Login = () => {\r\n  const [show, setShow] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n  const toast = useToast();\r\n  const [email, setEmail] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const history = useHistory();\r\n  const { setUser } = ChatState();\r\n\r\n  const submitHandler = async () => {\r\n    setLoading(true);\r\n    if (!email || !password) {\r\n      toast({\r\n        title: \"Please Fill all the Feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.post(\r\n        \"/api/user/login\",\r\n        { email, password },\r\n        config\r\n      );\r\n\r\n      toast({\r\n        title: \"Login Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setUser(data);\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      setLoading(false);\r\n      history.push(\"/chats\");\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <VStack spacing=\"10px\" color=\"white\" >\r\n      <FormControl  id=\"email\" isRequired>\r\n        <FormLabel>Email Address</FormLabel>\r\n        <Input \r\n          value={email}\r\n          type=\"email\"\r\n          placeholder=\"Enter Your Email Address\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n          borderColor=\"gray.300\"\r\n          focusBorderColor=\"gray.400\"\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired >\r\n        <FormLabel>Password</FormLabel>\r\n        <InputGroup size=\"md\" >\r\n          <Input\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Enter password\"\r\n            focusBorderColor=\"gray.400\"\r\n            \r\n          />\r\n          <InputRightElement width=\"4.5rem\" >\r\n            <Button bg=\"gray.700\" _hover={{bg:\"gray.700\"}} h=\"1.75rem\" _focus=\"none\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <Button\r\n        // colorScheme= \"\"\r\n        bg={\"gray.500\"}\r\n        width=\"100%\"\r\n        style={{ marginTop: 15 }}\r\n        onClick={submitHandler}\r\n        isLoading={loading}\r\n        _focus=\"none\"\r\n        focusBorderColor=\"gray.500\"\r\n      >\r\n        Login\r\n      </Button>\r\n      <Button\r\n        \r\n        variant=\"solid\"\r\n        colorScheme=\"red\"\r\n        width=\"100%\"\r\n        _focus=\"none\"\r\n        onClick={() => {\r\n          setEmail(\"guest@example.com\");\r\n          setPassword(\"123456\");\r\n        }}\r\n      >\r\n        Get Guest User Credentials\r\n      </Button>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nconst Signup = () => {\r\n  const [show, setShow] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n  const toast = useToast();\r\n  const history = useHistory();\r\n\r\n  const [name, setName] = useState();\r\n  const [email, setEmail] = useState();\r\n  const [confirmpassword, setConfirmpassword] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [pic, setPic] = useState();\r\n  const [picLoading, setPicLoading] = useState(false);\r\n\r\n  const submitHandler = async () => {\r\n    setPicLoading(true);\r\n    if (!name || !email || !password || !confirmpassword) {\r\n      toast({\r\n        title: \"Please Fill all the Feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n      return;\r\n    }\r\n    if (password !== confirmpassword) {\r\n      toast({\r\n        title: \"Passwords Do Not Match\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n    console.log(name, email, password, pic);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n      const resp= await axios.post(\r\n        \"/api/user\",\r\n        {\r\n          name,\r\n          email,\r\n          password,\r\n          pic,\r\n        },\r\n        config\r\n      );\r\n      console.log(\"response\",resp.data);\r\n      toast({\r\n        title: \"Registration Successful!! Please login \",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(resp.data));\r\n      setPicLoading(false);\r\n      // history.push(\"/chats\");\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n    }\r\n  };\r\n\r\n  const postDetails = (pics) => {\r\n    setPicLoading(true);\r\n    if (pics === undefined) {\r\n      toast({\r\n        title: \"Please Select an Image!\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n    console.log(pics);\r\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\r\n      const data = new FormData();\r\n      data.append(\"file\", pics);\r\n      data.append(\"upload_preset\", \"chat-app\");\r\n      data.append(\"cloud_name\", \"piyushproj\");\r\n      fetch(\"https://api.cloudinary.com/v1_1/piyushproj/image/upload\", {\r\n        method: \"post\",\r\n        body: data,\r\n      })\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          setPic(data.url.toString());\r\n          console.log(data.url.toString());\r\n          setPicLoading(false);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          setPicLoading(false);\r\n        });\r\n    } else {\r\n      toast({\r\n        title: \"Please Select an Image!\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n      return;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <VStack spacing=\"5px\" color=\"white\" >\r\n      <FormControl id=\"first-name\" isRequired>\r\n        <FormLabel>Name</FormLabel>\r\n        <Input\r\n          placeholder=\"Enter Your Name\"\r\n          focusBorderColor=\"gray.400\"\r\n          onChange={(e) => setName(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"email\" isRequired>\r\n        <FormLabel>Email Address</FormLabel>\r\n        <Input\r\n          type=\"email\"\r\n          focusBorderColor=\"gray.400\"\r\n          placeholder=\"Enter Your Email Address\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input \r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Enter Password\"\r\n            focusBorderColor=\"gray.400\"\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" bg=\"gray.700\" _hover={{bg:\"gray.700\"}} _focus=\"none\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Confirm Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Confirm password\"\r\n            focusBorderColor=\"gray.400\"\r\n            onChange={(e) => setConfirmpassword(e.target.value)}\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" bg=\"gray.700\" _hover={{bg:\"gray.700\"}} _focus=\"none\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <FormControl id=\"pic\">\r\n        <FormLabel>Upload your Picture</FormLabel>\r\n        <Input\r\n          type=\"file\"\r\n          p={1.5}\r\n          accept=\"image/*\"\r\n          focusBorderColor=\"gray.400\"\r\n          onChange={(e) => postDetails(e.target.files[0])}\r\n        />\r\n      </FormControl>\r\n      <Button\r\n        // colorScheme=\"gray\"\r\n        bg=\"gray.500\"\r\n        _hover={{bg:\"gray.400\"}}\r\n        _focus=\"none\"\r\n        width=\"100%\"\r\n        style={{ marginTop: 15 }}\r\n        onClick={submitHandler}\r\n        isLoading={picLoading}\r\n        focusBorderColor=\"gray.400\"\r\n      >\r\n        Sign Up\r\n      </Button>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n","import {\r\n  Box,\r\n  Container,\r\n  Tab,\r\n  TabList,\r\n  TabPanel,\r\n  TabPanels,\r\n  Tabs,\r\n  Text,\r\n  color,\r\n} from \"@chakra-ui/react\";\r\nimport { useEffect,useState } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport Login from \"../components/Authentication/Login\";\r\nimport Signup from \"../components/Authentication/Signup\";\r\n\r\nfunction Homepage() {\r\n  const history = useHistory();\r\n  const [activeTab, setActiveTab] = useState(0);\r\n\r\n  const handleTabChange = (index) => {\r\n    setActiveTab(index);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n\r\n    if (user) history.push(\"/chats\");\r\n  }, [history]);\r\n\r\n  return (\r\n    <Container className=\"ddfd\" maxW=\"xl\" centerContent >\r\n      <Box\r\n        // className=\"title1\"\r\n        d=\"flex\"\r\n        justifyContent=\"center\"\r\n        p={3}\r\n        bg=\"gray.600\"\r\n        w=\"100%\"\r\n        m=\"40px 0 15px 0\"\r\n        borderRadius=\"lg\"\r\n        borderWidth=\"1px\"\r\n        borderColor=\"gray.800\"\r\n        textColor=\"white\"\r\n        fontWeight=\"bold \"\r\n        // fontFamily=\"cursive\"\r\n      >\r\n        <Text  fontSize=\"4xl\" fontFamily=\"cursive\" bg=\"\" >\r\n          Chat-Buds\r\n        </Text>\r\n      </Box>\r\n      <Box bg=\"gray.700\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\" borderColor={\"blackAlpha.500\"}>\r\n        <Tabs isFitted variant=\"soft-rounded\" >\r\n          <TabList mb=\"1em\">\r\n            {/* <Tab bg=\"gray.500\" color=\"white\" className=\"chakra-tab-panel\" >Login</Tab>\r\n            <Tab bg=\"gray.500\" color=\"white\" >Sign Up</Tab> */}\r\n            <Tab\r\n            _focus=\"none\"\r\n              bg={activeTab === 0 ? \"gray.500\" : \"gray.400\"}\r\n              color=\"white\"\r\n              _selected={{ bg: \"gray.400\", color: \"white\" }}\r\n            >\r\n              Login\r\n            </Tab>\r\n            <Tab\r\n            _focus=\"none\"\r\n              bg={activeTab === 1 ? \"gray.400\" : \"gray.500\"}\r\n              color=\"white\"\r\n              _selected={{ bg: \"gray.400\", color: \"white\" }}\r\n            >\r\n              Sign Up\r\n            </Tab>\r\n          </TabList>\r\n          <TabPanels>\r\n            <TabPanel>+\r\n              <Login />\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Signup />\r\n            </TabPanel>\r\n          </TabPanels>\r\n        </Tabs>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Homepage;\r\n","import { FormControl } from \"@chakra-ui/form-control\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport { Icon, IconButton, Spinner, useToast } from \"@chakra-ui/react\";\r\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\r\nimport { useContext, useEffect, useRef, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { ArrowBackIcon, ArrowRightIcon } from \"@chakra-ui/icons\";\r\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\r\nimport ScrollableChat from \"./ScrollableChat\";\r\nimport Lottie from \"react-lottie\";\r\nimport animationData from \"../animations/typing.json\";\r\nimport { IoMdClock } from \"react-icons/io\";\r\nimport io from \"socket.io-client\";\r\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nimport ScheduleFormContext from \"../Context/SchedulemessageForm\";\r\nimport ScheduleMessageform from \"./ScheduleMessageform\";\r\nimport data from '@emoji-mart/data';\r\nimport Picker from '@emoji-mart/react';\r\n\r\n\r\nconst ENDPOINT = \"http://localhost:5000\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\r\nvar socket, selectedChatCompare;\r\n\r\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n  const [typing, setTyping] = useState(false);\r\n  const [istyping, setIsTyping] = useState(false);\r\n  const Formcontext = useContext(ScheduleFormContext);\r\n  const {ScheduleFormVis,setScheduleFormVis} = Formcontext;\r\n  const [showEmoticonTray, setShowEmoticonTray] = useState(false);\r\n  \r\n  const toast = useToast();\r\n\r\n  const defaultOptions = {\r\n    loop: true,\r\n    autoplay: true,\r\n    animationData: animationData,\r\n    rendererSettings: {\r\n      preserveAspectRatio: \"xMidYMid slice\",\r\n    },\r\n  };\r\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\r\n    ChatState();\r\n\r\n  const fetchMessages = async () => {\r\n    if (!selectedChat) return;\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      setLoading(true);\r\n\r\n      const { data } = await axios.get(\r\n        `/api/message/${selectedChat._id}`,\r\n        config\r\n      );\r\n      setMessages(data);\r\n      setLoading(false);\r\n\r\n      socket.emit(\"join chat\", selectedChat._id);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Messages\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const sendMessage = async (event) => {\r\n    if (event.key == \"Enter\" && newMessage) {\r\n      socket.emit(\"stop typing\", selectedChat._id);\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            \"Content-type\": \"application/json\",\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n        };\r\n        setNewMessage(\"\");\r\n        const { data } = await axios.post(\r\n          \"/api/message\",\r\n          {\r\n            content: newMessage,\r\n            chatId: selectedChat,\r\n          },\r\n          config\r\n        );\r\n        console.log(\"selectedChat\",selectedChat);\r\n        socket.emit(\"new message\", data);\r\n        setMessages([...messages, data]);\r\n      } catch (error) {\r\n        toast({\r\n          title: \"Error Occured!\",\r\n          description: \"Failed to send the Message\",\r\n          status: \"error\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n      }\r\n    }\r\n  };\r\n  const sendMessagebtn = async () => {\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      setNewMessage(\"\");\r\n      const { data } = await axios.post(\r\n        \"/api/message\",\r\n        {\r\n          content: newMessage,\r\n          chatId: selectedChat,\r\n        },\r\n        config\r\n      );\r\n      socket.emit(\"new message\", data);\r\n      setMessages([...messages, data]);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to send the Message\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    socket = io(ENDPOINT);\r\n    socket.emit(\"setup\", user);\r\n    socket.on(\"connected\", () => setSocketConnected(true));\r\n    socket.on(\"typing\", () => setIsTyping(true));\r\n    socket.on(\"stop typing\", () => setIsTyping(false));\r\n\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchMessages();\r\n\r\n    selectedChatCompare = selectedChat;\r\n    // eslint-disable-next-line\r\n  }, [selectedChat]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"message recieved\", (newMessageRecieved) => {\r\n      if (\r\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\r\n        selectedChatCompare._id !== newMessageRecieved.chat._id\r\n      ) {\r\n        if (!notification.includes(newMessageRecieved)) {\r\n          setNotification([newMessageRecieved, ...notification]);\r\n          setFetchAgain(!fetchAgain);\r\n        }\r\n      } else {\r\n        setMessages([...messages, newMessageRecieved]);\r\n      }\r\n    });\r\n  });\r\n\r\n  const typingHandler = (e) => {\r\n    setNewMessage(e.target.value);\r\n\r\n    if (!socketConnected) return;\r\n\r\n    if (!typing) {\r\n      setTyping(true);\r\n      socket.emit(\"typing\", selectedChat._id);\r\n    }\r\n    let lastTypingTime = new Date().getTime();\r\n    var timerLength = 3000;\r\n    setTimeout(() => {\r\n      var timeNow = new Date().getTime();\r\n      var timeDiff = timeNow - lastTypingTime;\r\n      if (timeDiff >= timerLength && typing) {\r\n        socket.emit(\"stop typing\", selectedChat._id);\r\n        setTyping(false);\r\n      }\r\n    }, timerLength);\r\n  };\r\n  const handleScehduleButton = ()=>{\r\n    setScheduleFormVis(true);\r\n  }\r\n\r\n  ///////emoji////////\r\n  const handleEmoticonClick = () => {\r\n    setShowEmoticonTray(!showEmoticonTray);\r\n  };\r\n\r\n  const handleEmoticonSelect = (emoji) => {\r\n    setNewMessage((prevMessage) => prevMessage + emoji.native);\r\n  };\r\n\r\n  const pickerRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const handleClickOutside = (event) => {\r\n      if (pickerRef.current && !pickerRef.current.contains(event.target)) {\r\n        setShowEmoticonTray(false);\r\n      }\r\n    };\r\n\r\n    document.addEventListener('click', handleClickOutside);\r\n\r\n    return () => {\r\n      document.removeEventListener('click', handleClickOutside);\r\n    };\r\n  },[pickerRef]);\r\n\r\n  return (\r\n    <>\r\n      {selectedChat ? (\r\n        <>\r\n          <Text\r\n           className=\"chatHeader\"\r\n            fontSize={{ base: \"28px\", md: \"30px\" }}\r\n            pb={3}\r\n            px={2}\r\n            w=\"100%\"\r\n            textColor=\"white\"\r\n            fontWeight=\"bold\"\r\n            fontStyle=\"normal\"\r\n\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            \r\n            justifyContent={{ base: \"space-between\" }}\r\n            justifyItems=\"center\"\r\n            alignItems=\"center\"\r\n          >\r\n            <IconButton className=\"iconBut\" color=\"black\"\r\n              d={{ base: \"flex\", md: \"none\" }}\r\n              icon={<ArrowBackIcon />}\r\n              onClick={() => setSelectedChat(\"\")}\r\n            />\r\n            {messages &&\r\n              (!selectedChat.isGroupChat ? (\r\n                <>\r\n                  {getSender(user, selectedChat.users)}\r\n                  <ProfileModal\r\n                    user={getSenderFull(user, selectedChat.users)}\r\n                  />\r\n                </>\r\n              ) : (\r\n                <>\r\n                  {selectedChat.chatName.toUpperCase()}\r\n                  <UpdateGroupChatModal\r\n                    fetchMessages={fetchMessages}\r\n                    fetchAgain={fetchAgain}\r\n                    setFetchAgain={setFetchAgain}\r\n                  />\r\n                </>\r\n              ))}\r\n          </Text>\r\n          <Box\r\n            className=\"chatwallpaper\"\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            justifyContent=\"flex-end\"\r\n\r\n            p={3}\r\n            // bg=\"#E8E8E8\"\r\n            // bg=\"black \"\r\n            \r\n            w=\"100%\"\r\n            h=\"100%\"\r\n            borderRadius=\"lg\"\r\n            overflowY=\"hidden\"\r\n          >\r\n            {loading ? (\r\n              <Spinner\r\n                size=\"xl\"\r\n                w={20}\r\n                h={20}\r\n                alignSelf=\"center\"\r\n                margin=\"auto\"\r\n              />\r\n            ) : (\r\n              <div className=\"messages\">\r\n                <ScrollableChat messages={messages} />\r\n              </div>\r\n            )}\r\n\r\n            <FormControl\r\n              onKeyDown={sendMessage}\r\n              id=\"first-name\"\r\n              isRequired\r\n              mt={3}\r\n              d=\"flex\"\r\n            >\r\n              {istyping ? (\r\n                <div>\r\n                  <Lottie\r\n                    options={defaultOptions}\r\n                    // height={50}\r\n                    width={70}\r\n                    style={{ marginBottom: 15, marginLeft: 0 }}\r\n                  />\r\n                </div>\r\n              ) : (\r\n                <></>\r\n              )}\r\n              <div ref={pickerRef} style={{ display: 'flex', alignItems:'center',position: 'relative' }}>\r\n                <button className=\"emoji-tray\" onClick={handleEmoticonClick}>\r\n                  😊\r\n                </button>\r\n\r\n                {showEmoticonTray && (\r\n                  <div style={{ \r\n                    position: 'absolute', \r\n                    bottom: '50px'\r\n                  }}>\r\n                    <Picker data={data} preview=\"none\" onEmojiSelect={handleEmoticonSelect} />\r\n                  </div>\r\n                )}\r\n\r\n              </div>\r\n              <Input\r\n                variant=\"filled\"\r\n                bg=\"#E0E0E0\"\r\n                placeholder=\"Enter a message..\"\r\n                color=\"white\"\r\n                value={newMessage}\r\n                onChange={typingHandler}\r\n                focusBorderColor=\"gray.400  \"\r\n              />\r\n              <Icon\r\n              cursor=\"pointer\"\r\n              onClick={handleScehduleButton}\r\n                as={IoMdClock}\r\n                height=\"5vh\"\r\n                width=\"5vh\"\r\n                color=\"green\"\r\n                border=\"2px solid black\"\r\n                borderRadius=\"100%\"\r\n                backgroundColor=\"white\"\r\n                marginLeft=\"2vh\"\r\n                marginRight=\"2vh\"\r\n              />\r\n              <div className=\"sendMessage\" onClick={sendMessagebtn}>\r\n                <ArrowRightIcon />\r\n              </div>\r\n            </FormControl>\r\n            {\r\n            ScheduleFormVis&&<ScheduleMessageform socket={socket} messages={messages} setMessages={setMessages} />\r\n            }\r\n          </Box>\r\n        </>\r\n      ) : (\r\n        // to get socket.io on same page\r\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\r\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\r\n            Click on a user to start chatting\r\n          </Text>\r\n        </Box>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SingleChat;\r\n","export const isSameSenderMargin = (messages, m, i, userId) => {\r\n  // console.log(i === messages.length - 1);\r\n\r\n  if (\r\n    i < messages.length - 1 &&\r\n    messages[i + 1].sender._id === m.sender._id &&\r\n    messages[i].sender._id !== userId\r\n  )\r\n    return 33;\r\n  else if (\r\n    (i < messages.length - 1 &&\r\n      messages[i + 1].sender._id !== m.sender._id &&\r\n      messages[i].sender._id !== userId) ||\r\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\r\n  )\r\n    return 0;\r\n  else return \"auto\";\r\n};\r\n\r\nexport const isSameSender = (messages, m, i, userId) => {\r\n  return (\r\n    i < messages.length - 1 &&\r\n    (messages[i + 1].sender._id !== m.sender._id ||\r\n      messages[i + 1].sender._id === undefined) &&\r\n    messages[i].sender._id !== userId\r\n  );\r\n};\r\n\r\nexport const isLastMessage = (messages, i, userId) => {\r\n  return (\r\n    i === messages.length - 1 &&\r\n    messages[messages.length - 1].sender._id !== userId &&\r\n    messages[messages.length - 1].sender._id\r\n  );\r\n};\r\n\r\nexport const isSameUser = (messages, m, i) => {\r\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\r\n};\r\n\r\nexport const getSender = (loggedUser, users) => {\r\n  return users[0]?._id === loggedUser?._id ? users[1].name : users[0].name;\r\n};\r\n\r\nexport const getSenderFull = (loggedUser, users) => {\r\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\r\n};\r\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  IconButton,\r\n  Text,\r\n  Image,\r\n} from \"@chakra-ui/react\";\r\n\r\nconst ProfileModal = ({ user, children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  return (\r\n    <>\r\n      {children ? (\r\n        <span onClick={onOpen}>{children}</span>\r\n      ) : (\r\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n      )}\r\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent h=\"410px\" className=\"modalpage\" bg=\"gray.400\">\r\n          <ModalHeader\r\n            fontSize=\"40px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {user.name}\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"space-between\"\r\n          >\r\n            <Image\r\n              borderRadius=\"full\"\r\n              boxSize=\"150px\"\r\n              src={user.pic}\r\n              alt={user.name}\r\n            />\r\n            <Text\r\n              fontSize={{ base: \"28px\", md: \"30px\" }}\r\n              fontFamily=\"Work sans\"\r\n            >\r\n              Email: {user.email}\r\n            </Text>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button bg=\"gray.700\" color=\"whiteAlpha.800\" _hover={{bg:\"gray.600\"}} _focus=\"none\" onClick={onClose}>Close</Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProfileModal;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport ScrollableFeed from \"react-scrollable-feed\";\r\nimport {\r\n  isLastMessage,\r\n  isSameSender,\r\n  isSameSenderMargin,\r\n  isSameUser,\r\n} from \"../config/ChatLogics\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst ScrollableChat = ({ messages }) => {\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <ScrollableFeed>\r\n      {messages &&\r\n        messages.map((m, i) => (\r\n          <div style={{ display: \"flex\" }} key={m._id}>\r\n            {(isSameSender(messages, m, i, user._id) ||\r\n              isLastMessage(messages, i, user._id)) && (\r\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\r\n                <Avatar\r\n                  mt=\"7px\"\r\n                  mr={1}\r\n                  size=\"sm\"\r\n                  cursor=\"pointer\"\r\n                  name={m.sender.name}\r\n                  src={m.sender.pic}\r\n                />\r\n              </Tooltip>\r\n            )}\r\n            <span\r\n              style={{\r\n                backgroundColor: `${\r\n                  m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\r\n                }`,\r\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\r\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\r\n                borderRadius: \"20px\",\r\n                padding: \"5px 15px\",\r\n                maxWidth: \"75%\",\r\n              }}\r\n            >\r\n              {m.content}\r\n            </span>\r\n          </div>\r\n        ))}\r\n    </ScrollableFeed>\r\n  );\r\n};\r\n\r\nexport default ScrollableChat;\r\n","import { CloseIcon } from \"@chakra-ui/icons\";\r\nimport { Badge } from \"@chakra-ui/layout\";\r\n\r\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\r\n  return (\r\n    <Badge\r\n      px={2}\r\n      py={1}\r\n      borderRadius=\"lg\"\r\n      m={1}\r\n      mb={2}\r\n      variant=\"solid\"\r\n      fontSize={12}\r\n      colorScheme=\"purple\"\r\n      cursor=\"pointer\"\r\n      onClick={handleFunction}\r\n    >\r\n      {user.name}\r\n      {admin === user._id && <span> (Admin)</span>}\r\n      <CloseIcon pl={1} />\r\n    </Badge>\r\n  );\r\n};\r\n\r\nexport default UserBadgeItem;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\n// import { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nconst UserListItem = ({ handleFunction,user }) => {\r\n  // const { user } = ChatState();\r\n\r\n  {console.log(\"users\",user);}\r\n  return (\r\n    <Box\r\n      onClick={handleFunction}\r\n      cursor=\"pointer\"\r\n      // bg=\"#E8E8E8\"\r\n      bg=\"red\"\r\n      _hover={{\r\n        background: \"#38B2AC\",\r\n        color: \"white\",\r\n      }}\r\n      w=\"100%\"\r\n      d=\"flex\"\r\n      alignItems=\"center\"\r\n      color=\"black\"\r\n      px={3}\r\n      py={2}\r\n      mb={2}\r\n      borderRadius=\"lg\"\r\n    >\r\n      <Avatar\r\n        mr={2}\r\n        size=\"sm\"\r\n        cursor=\"pointer\"\r\n        name={user.name}\r\n        src={user.pic}\r\n      />\r\n      <Box >\r\n        <Text>{user.name}</Text>\r\n        <Text fontSize=\"xs\">\r\n          <b>Email : </b>\r\n          {user.email}\r\n        </Text>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default UserListItem;\r\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n  IconButton,\r\n  Spinner,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\n\r\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [renameloading, setRenameLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const { selectedChat, setSelectedChat, user } = ChatState();\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      console.log(data);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleRename = async () => {\r\n    if (!groupChatName) return;\r\n\r\n    try {\r\n      setRenameLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/rename`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          chatName: groupChatName,\r\n        },\r\n        config\r\n      );\r\n\r\n      console.log(data._id);\r\n      // setSelectedChat(\"\");\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setRenameLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setRenameLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  const handleAddUser = async (user1) => {\r\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\r\n      toast({\r\n        title: \"User Already in group!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (selectedChat.groupAdmin._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can add someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const resp = await axios.put(\r\n        `/api/chat/sendmail/${selectedChat._id}/${user1._id}`,\r\n        {},\r\n        config\r\n      );\r\n      if(resp.status===200){\r\n        toast({\r\n          title: \"Mail sent\",\r\n          description: \"Request for grp join sent to user\",\r\n          status: \"success\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        })\r\n      }\r\n      console.log(\"resp\",resp);\r\n      // setSelectedChat(data);\r\n      // setFetchAgain(!fetchAgain);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  const handleRemove = async (user1) => {\r\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can remove someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/groupremove`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        config\r\n      );\r\n\r\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      fetchMessages();\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {selectedChat.chatName}\r\n          </ModalHeader>\r\n\r\n          <ModalCloseButton />\r\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\r\n              {selectedChat.users.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  admin={selectedChat.groupAdmin}\r\n                  handleFunction={() => handleRemove(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            <FormControl d=\"flex\">\r\n              <Input\r\n                placeholder=\"Chat Name\"\r\n                mb={3}\r\n                value={groupChatName}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n              <Button\r\n                variant=\"solid\"\r\n                colorScheme=\"teal\"\r\n                ml={1}\r\n                isLoading={renameloading}\r\n                onClick={handleRename}\r\n              >\r\n                Update\r\n              </Button>\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add User to group\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n\r\n            {loading ? (\r\n              <Spinner size=\"lg\" />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => handleAddUser(user)}\r\n                />\r\n              ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\r\n              Leave Group\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UpdateGroupChatModal;\r\n","import { createContext } from \"react\";\r\n\r\nconst ScheduleFormContext = createContext();\r\n\r\nexport default ScheduleFormContext","import { Box, Button, Icon, Input } from \"@chakra-ui/react\";\r\nimport React, { useContext, useState } from \"react\"; \r\nimport { IoMdClock } from \"react-icons/io\";\r\nimport { Text } from \"@chakra-ui/react\";\r\nimport { ChevronDownIcon, ChevronUpIcon } from \"@chakra-ui/icons\";\r\nimport ScheduleFormContext from \"../Context/SchedulemessageForm\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nimport axios from \"axios\";\r\nimport { useToast } from '@chakra-ui/react'\r\nconst ScheduleMessageform = ({setMessages,messages,socket}) => {\r\n  const [hour, setHour] = useState(0);\r\n  const [minute, setminute] = useState(0);\r\n  const toast = useToast();\r\n  const [date,setDate] = useState(\"\");\r\n  const [newMessage,setNewMessage]= useState(\"\");\r\n  const { selectedChat, user } =ChatState();\r\n  const VisContext = useContext(ScheduleFormContext);\r\n  const {setScheduleFormVis} = VisContext;\r\n  const hourIncrement =()=>{\r\n    if(hour+1<=23){\r\n        setHour(hour+1);\r\n    }else{\r\n        setHour(0);\r\n    }\r\n  }\r\n  const hourDecrement =()=>{\r\n    if(hour-1>=0){\r\n        setHour(hour-1);\r\n    }else{\r\n        setHour(23);\r\n    }\r\n  }\r\n  const minuteIncrement =()=>{\r\n    if(minute+1<=59){\r\n        setminute(minute+1);\r\n    }else{\r\n        setminute(0);\r\n    }\r\n  }\r\n  const minuteDecrement =()=>{\r\n    if(minute-1>=0){\r\n        setminute(minute-1);\r\n    }else{\r\n        setminute(59);\r\n    }\r\n  }\r\n  const handleCancelButton = ()=>{\r\n    setScheduleFormVis(false);\r\n    console.log(\"u clicked cancel button\")\r\n  }\r\n  // const handleSendBuutton = ()=>{\r\n  //   setScheduleFormVis(false);\r\n  //   console.log(\"u clicked Send button\")\r\n  // }\r\n  const handledateChange = (e)=>{\r\n    setDate(e.target.value);\r\n    console.log(\"date\",e.target.value);\r\n  }\r\n\r\n  const sendMessagebtn = async () => {\r\n    toast({\r\n      title: 'schedule!',\r\n      description: \"Message will be sent on time \",\r\n      status: 'success',\r\n      duration: 6000,\r\n      isClosable: true,\r\n    })\r\n    setScheduleFormVis(false);\r\n    \r\n    try {\r\n      \r\n      // const scheduledTime = new Date('2024-01-07T17:38:00');\r\n       let scheduledTime = date+'T'+hour+':'+minute+':'+'00';\r\n       console.log(\"time\",scheduledTime)\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      setNewMessage(\"\");\r\n      const { data } = await axios.post(\r\n        \"/api/message\",\r\n        {\r\n          content: newMessage,\r\n          chatId: selectedChat,\r\n          scheduledTime:scheduledTime\r\n        },\r\n        config\r\n      );\r\n      \r\n      socket.emit(\"new message\", data);\r\n      setMessages([...messages, data]);\r\n      \r\n    } catch (error) {\r\n      toast({\r\n        title: 'Error!',\r\n        description: \"Invalid time \",\r\n        status: 'error',\r\n        duration: 6000,\r\n        isClosable: true,\r\n      })\r\n    }\r\n  };\r\n  const handelmsgchange = (e)=>{\r\n    setNewMessage(e.target.value)\r\n  }\r\n  return (\r\n    <Box\r\n      boxSizing=\"border-box\"\r\n      padding=\"3vh\"\r\n      position=\"absolute\"\r\n      boxShadow=\"10px 10px 10px gray\"\r\n      right=\"8vh\"\r\n      bgColor=\"white\"\r\n      height=\"52vh\"\r\n      width=\"40vh\"\r\n      borderRadius=\"20px\"\r\n      marginBottom=\"0\"\r\n    >\r\n      <Box display=\"flex\">\r\n        <Icon\r\n          as={IoMdClock}\r\n          height=\"4vh\"\r\n          width=\"4vh\"\r\n          color=\"black\"\r\n          border=\"2px solid black\"\r\n          borderRadius=\"100%\"\r\n          backgroundColor=\"white\"\r\n          marginLeft=\"2vh\"\r\n          marginRight=\"2vh\"\r\n        />\r\n        <Text>Schedule a Message</Text>\r\n      </Box>\r\n      <Text marginTop=\"2vh\" marginLeft=\"2vh\">\r\n        Message\r\n      </Text>\r\n      <Input\r\n      onChange={handelmsgchange}\r\n        marginTop=\"2vh\"\r\n        border=\"2px solid black\"\r\n        placeholder=\"Enter message \"\r\n      />\r\n      <Input type=\"Date\" onChange={handledateChange}  marginTop=\"2vh\"/>\r\n      <Box display=\"flex\" gridGap=\"3.5vh\" marginTop=\"2vh\">\r\n        <Box\r\n          border=\"2px solid black\"\r\n          boxShadow=\"4px 4px 4px gray\"\r\n          height=\"2vh\"\r\n          width=\"2vh\"\r\n          position=\"absolute\"\r\n          bgColor=\"black\"\r\n          borderRadius=\"100%\"\r\n          left=\"47%\"\r\n          top=\"60%\"\r\n        ></Box>\r\n        <Box\r\n          border=\"2px solid black\"\r\n          boxShadow=\"4px 4px 4px gray\"\r\n          height=\"2vh\"\r\n          width=\"2vh\"\r\n          position=\"absolute\"\r\n          bgColor=\"black\"\r\n          borderRadius=\"100%\"\r\n          left=\"47%\"\r\n          top=\"70%\"\r\n        ></Box>\r\n        <Box\r\n          border=\"2px solid gray\"\r\n          borderRadius=\"20px\"\r\n          height=\"13vh\"\r\n          width=\"12vh\"\r\n          marginLeft=\"3vh\"\r\n        >\r\n          <Text height=\"75%\" fontSize=\"7vh\" textAlign=\"center\">\r\n            {hour}\r\n          </Text>\r\n          <Box display=\"flex\" justifyContent=\"center\">\r\n            <ChevronUpIcon fontSize=\"3vh\" cursor=\"pointer\" onClick={hourIncrement} />\r\n            <ChevronDownIcon cursor=\"pointer\" fontSize=\"3vh\" onClick={hourDecrement} />\r\n          </Box>\r\n        </Box>\r\n        <Box\r\n          border=\"2px solid gray\"\r\n          borderRadius=\"20px\"\r\n          height=\"13vh\"\r\n          width=\"12vh\"\r\n        >\r\n          <Text height=\"75%\" fontSize=\"7vh\" textAlign=\"center\">\r\n            {minute}\r\n          </Text>\r\n          <Box display=\"flex\" justifyContent=\"center\">\r\n            <ChevronUpIcon fontSize=\"3vh\" onClick={minuteIncrement}  cursor=\"pointer\" />\r\n            <ChevronDownIcon fontSize=\"3vh\" onClick={minuteDecrement} cursor=\"pointer\" />\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n      <Button onClick={handleCancelButton} colorScheme=\"red\" float=\"right\" marginTop=\"2vh\">Cancel</Button>\r\n      <Button\r\n      onClick={sendMessagebtn}\r\n        float=\"right\"\r\n        marginRight=\"2vh\"\r\n        colorScheme=\"purple\"\r\n        marginTop=\"2vh\"\r\n      >\r\n        send\r\n      </Button>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ScheduleMessageform;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport SingleChat from \"./SingleChat\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\r\n  const { selectedChat } = ChatState();\r\n\r\n  return (\r\n    <Box\r\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\r\n      alignItems=\"center\"\r\n      flexDir=\"column\"\r\n      p={3}\r\n      bg=\"black\"\r\n      w={{ base: \"100%\", md: \"68%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Chatbox;\r\n","import { Stack } from \"@chakra-ui/layout\";\r\nimport { Skeleton } from \"@chakra-ui/skeleton\";\r\n\r\nconst ChatLoading = () => {\r\n  return (\r\n    <Stack>\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default ChatLoading;\r\n","import {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n  Spinner,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\n\r\nconst GroupChatModal = ({ children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [selectedUsers, setSelectedUsers] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const { user, chats, setChats } = ChatState();\r\n\r\n  const handleGroup = (userToAdd) => {\r\n    if (selectedUsers.includes(userToAdd)) {\r\n      toast({\r\n        title: \"User already added\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    setSelectedUsers([...selectedUsers, userToAdd]);\r\n  };\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      console.log(data);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleDelete = (delUser) => {\r\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    setLoading(true);\r\n    if (!groupChatName || !selectedUsers) {\r\n      toast({\r\n        title: \"Please fill all the feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(\r\n        `/api/chat/group`,\r\n        {\r\n          name: groupChatName,\r\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\r\n        },\r\n        config\r\n      );\r\n      setChats([data, ...chats]);\r\n      onClose();\r\n      toast({\r\n        title: \"New Group Chat Created!\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Failed to Create the Chat!\",\r\n        description: error.response.data,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <span onClick={onOpen}>{children}</span>\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            Create Group Chat\r\n          </ModalHeader>\r\n          {loading&&\r\n            <Spinner\r\n            margin=\"auto\"\r\n              thickness=\"4px\"\r\n              speed=\"0.65s\"\r\n              emptyColor=\"gray.200\"\r\n              color=\"blue.500\"\r\n              size=\"xl\"\r\n            />\r\n          }\r\n          <ModalCloseButton />\r\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Chat Name\"\r\n                mb={3}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add Users eg: John, Piyush, Jane\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\r\n              {selectedUsers.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  handleFunction={() => handleDelete(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            {loading ? (\r\n              // <ChatLoading />\r\n              <div>Adding...</div>\r\n            ) : (\r\n              searchResult\r\n                ?.slice(0, 4)\r\n                .map((user) => (\r\n                  <UserListItem\r\n                    key={user._id}\r\n                    user={user}\r\n                    handleFunction={() => handleGroup(user)}\r\n                  />\r\n                ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\r\n              Create Chat\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GroupChatModal;\r\n","import { AddIcon } from \"@chakra-ui/icons\";\r\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { getSender } from \"../config/ChatLogics\";\r\nimport ChatLoading from \"./ChatLoading\";\r\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\r\nimport { Button } from \"@chakra-ui/react\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst MyChats = ({ fetchAgain }) => {\r\n  const [loggedUser, setLoggedUser] = useState();\r\n\r\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\r\n\r\n  const toast = useToast();\r\n\r\n  const fetchChats = async () => {\r\n    // console.log(user._id);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const resp = await axios.get(\"/api/chat\", config);\r\n      setChats(resp.data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the chats\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\r\n    fetchChats();\r\n    // eslint-disable-next-line\r\n  }, [fetchAgain]);\r\n\r\n  return (\r\n    <Box className=\"mychatdiv\"\r\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\r\n      flexDir=\"column\"\r\n      alignItems=\"center\"\r\n      p={3}\r\n      // bg=\"red\"\r\n      w={{ base: \"100%\", md: \"31%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n      <Box\r\n        pb={3}\r\n        px={3}\r\n        fontSize={{ base: \"28px\", md: \"30px\" }}\r\n        fontFamily=\"Work sans\"\r\n        d=\"flex\"\r\n        w=\"100%\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        color=\"white\"\r\n      >\r\n        My Chats\r\n        <GroupChatModal>\r\n          <Button\r\n            d=\"flex\"\r\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\r\n            rightIcon={<AddIcon />}\r\n            color=\"blue\"\r\n          >\r\n            New Group Chat\r\n          </Button>\r\n        </GroupChatModal>\r\n      </Box>\r\n      <Box\r\n        d=\"flex\"\r\n        flexDir=\"column\"\r\n        p={3}\r\n        // bg=\"#F8F8F8\"\r\n        className=\"innerMychat\"\r\n        w=\"100%\"\r\n        h=\"100%\"\r\n        borderRadius=\"lg\"\r\n        overflowY=\"hidden\"\r\n      >\r\n        {chats ? (\r\n          <Stack overflowY=\"scroll\">\r\n            {chats.map((chat) => (\r\n              <Box\r\n                onClick={() => setSelectedChat(chat)}\r\n                cursor=\"pointer\"\r\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\r\n                color={selectedChat === chat ? \"white\" : \"black\"}\r\n                px={3}\r\n                py={2}\r\n                borderRadius=\"lg\"\r\n                key={chat._id}\r\n              >\r\n                <Text>\r\n                  {!chat.isGroupChat\r\n                    ? getSender(loggedUser, chat.users)\r\n                    : chat.chatName}\r\n                </Text>\r\n                {chat.latestMessage && (\r\n                  <Text fontSize=\"xs\">\r\n                    <b>{chat.latestMessage.sender.name} : </b>\r\n                    {chat.latestMessage.content.length > 50\r\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\r\n                      : chat.latestMessage.content}\r\n                  </Text>\r\n                )}\r\n              </Box>\r\n            ))}\r\n          </Stack>\r\n        ) : (\r\n          <ChatLoading />\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MyChats;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport {\r\n  Menu,\r\n  MenuButton,\r\n  MenuDivider,\r\n  MenuItem,\r\n  MenuList,\r\n} from \"@chakra-ui/menu\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerContent,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\r\nimport { Avatar } from \"@chakra-ui/avatar\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport ChatLoading from \"../ChatLoading\";\r\nimport { Spinner } from \"@chakra-ui/spinner\";\r\nimport ProfileModal from \"./ProfileModal\";\r\nimport NotificationBadge from \"react-notification-badge\";\r\nimport { Effect } from \"react-notification-badge\";\r\nimport { getSender } from \"../../config/ChatLogics\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nfunction SideDrawer() {\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [loadingChat, setLoadingChat] = useState(false);\r\n\r\n  const {\r\n    setSelectedChat,\r\n    user,\r\n    notification,\r\n    setNotification,\r\n    chats,\r\n    setChats,\r\n  } = ChatState();\r\n\r\n  const toast = useToast();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const history = useHistory();\r\n\r\n  const logoutHandler = () => {\r\n    localStorage.removeItem(\"userInfo\");\r\n    history.push(\"/\");\r\n  };\r\n\r\n  const handleSearch = async () => {\r\n    if (!search) {\r\n      toast({\r\n        title: \"Please Enter something in search\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top-left\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n\r\n      setLoading(false);\r\n      console.log(\"data\",data);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const accessChat = async (userId) => {\r\n    console.log(userId);\r\n\r\n    try {\r\n      setLoadingChat(true);\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\r\n\r\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\r\n      setSelectedChat(data);\r\n      setLoadingChat(false);\r\n      onClose();\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error fetching the chat\",\r\n        description: error.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box \r\n        d=\"flex\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        bg=\"black\"\r\n        color=\"white\"\r\n        w=\"100%\"\r\n        p=\"5px 10px 5px 10px\"\r\n        borderWidth=\"5px\"\r\n        \r\n      >\r\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\r\n          <Button variant=\"ghost\" onClick={onOpen} _hover={{bg:\"gray.700\"}} _focus=\"none\">\r\n            <i className=\"fas fa-search\"></i>\r\n            <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\r\n              Search User\r\n            </Text>\r\n          </Button>\r\n        </Tooltip>\r\n        <Text fontSize=\"2xl\" fontFamily=\"cursive\">\r\n          Chat-Buds\r\n        </Text>\r\n        <div>\r\n          <Menu>\r\n            <MenuButton p={1}>\r\n              <NotificationBadge\r\n                count={notification.length}\r\n                effect={Effect.SCALE}\r\n              />\r\n              <BellIcon fontSize=\"2xl\" m={1} />\r\n            </MenuButton>\r\n            <MenuList pl={2}>\r\n              {!notification.length && \"No New Messages\"}\r\n              {notification.map((notif) => (\r\n                <MenuItem \r\n                  key={notif._id}\r\n                  onClick={() => {\r\n                    setSelectedChat(notif.chat);\r\n                    setNotification(notification.filter((n) => n !== notif));\r\n                  }}\r\n                >\r\n                  {notif.chat.isGroupChat\r\n                    ? `New Message in ${notif.chat.chatName}`\r\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\r\n                </MenuItem>\r\n              ))}\r\n            </MenuList>\r\n          </Menu>\r\n          <Menu >\r\n            <MenuButton as={Button} bg=\"gray.600\" _hover={{bg:\"gray.500\"}} rightIcon={<ChevronDownIcon />}>\r\n              <Avatar\r\n                size=\"sm\"\r\n                cursor=\"pointer\"\r\n                name={user.name}\r\n                src={user.pic}\r\n                color=\"black\"\r\n              />\r\n            </MenuButton>\r\n            <MenuList bg=\"gray.700\">\r\n              <ProfileModal user={user}  >\r\n                <MenuItem _hover={{bg:\"gray.400\"}} >My Profile</MenuItem>{\" \"}\r\n              </ProfileModal>\r\n              <MenuDivider />\r\n              <MenuItem _hover={{bg:\"gray.400\"}} onClick={logoutHandler}>Logout</MenuItem>\r\n            </MenuList>\r\n          </Menu>\r\n        </div>\r\n      </Box>\r\n\r\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\r\n        <DrawerOverlay />\r\n        <DrawerContent >\r\n          <DrawerHeader borderBottomWidth=\"1px\" bg=\"gray.800\"  color=\"white\">Search Users</DrawerHeader>\r\n          <DrawerBody  className=\"drawerBody\">\r\n            <Box d=\"flex\" pb={2}>\r\n              <Input\r\n                placeholder=\"Search by name or email\"\r\n                color=\"whiteAlpha.700\"\r\n                mr={2}\r\n                value={search}\r\n                onChange={(e) => setSearch(e.target.value)}\r\n              />\r\n              <Button onClick={handleSearch}>Go</Button>\r\n            </Box>\r\n            {loading ? (\r\n              <ChatLoading />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => accessChat(user._id)}\r\n                />\r\n              ))\r\n            )}\r\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\r\n          </DrawerBody>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SideDrawer;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport Chatbox from \"../components/Chatbox\";\r\nimport MyChats from \"../components/MyChats\";\r\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Chatpage = () => {\r\n  const [fetchAgain, setFetchAgain] = useState(false);\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <div style={{ width: \"100%\" }}>\r\n      {user && <SideDrawer />}\r\n      <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\r\n        {user && <MyChats fetchAgain={fetchAgain} />}\r\n        {user && (\r\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n        )}\r\n      </Box>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatpage;\r\n","import { Box, Text, Button, useToast } from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport React from \"react\";\r\nimport { useParams,useHistory  } from \"react-router-dom/cjs/react-router-dom.min\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Joingrp = () => {\r\n  const toast = useToast();\r\n  const history = useHistory();\r\n    const {chatId,userId}  = useParams()\r\n    const { user } = ChatState();\r\n    const handleJoingrp =async ()=>{\r\n        console.log(\"I got clicked\",chatId,userId)\r\n        try {\r\n          // setLoading(true);\r\n          const config = {\r\n            headers: {\r\n              Authorization: `Bearer ${user.token}`,\r\n            },\r\n          };\r\n          const resp = await axios.put(\r\n            `/api/chat/groupadd/${chatId}/${userId}`,\r\n            {},\r\n            config\r\n          );\r\n          console.log(\"resp\",resp);\r\n          if(resp.status===200){\r\n            toast({\r\n              title: \"Added\",\r\n              description: \"You were added to grp\",\r\n              status: \"success\",\r\n              duration: 5000,\r\n              isClosable: true,\r\n              position: \"bottom\",\r\n            });\r\n          }\r\n          \r\n          // setSelectedChat(data);\r\n          // setFetchAgain(!fetchAgain);\r\n          // setLoading(false);\r\n        } catch (error) { \r\n          toast({\r\n            title: \"Error\",\r\n            description: \"Something went wrong\",\r\n            status: \"error\",\r\n            duration: 5000,\r\n            isClosable: true,\r\n            position: \"bottom\",\r\n          });\r\n          // setLoading(false);\r\n        }\r\n        history.push('/');\r\n    }\r\n  return (\r\n    <Box\r\n      border=\"2px solid white\"\r\n      height=\"38vh\"\r\n      borderRadius=\"30px\"\r\n      width=\"50vh\"\r\n      margin=\"auto\"\r\n      bgColor=\"white\"\r\n    >\r\n      <Text\r\n        textAlign=\"center\"\r\n        marginTop=\"4vh\"\r\n        fontSize=\"xx-large\"\r\n        fontWeight=\"600\"\r\n        textShadow=\"4px 4px 4px gray\"\r\n      >\r\n        Are you sure you want to join the group ?\r\n        <Box marginTop=\"8vh\" display=\"flex\" gridGap=\"3vh\" justifyContent=\"center\">\r\n            <Button onClick={handleJoingrp} height=\"6vh\" width=\"10vh\" colorScheme=\"green\">Join</Button>\r\n            <Button height=\"6vh\" width=\"10vh\" colorScheme=\"red\">Reject</Button>\r\n        </Box>\r\n      </Text>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Joingrp;\r\n","import \"./App.css\";\r\nimport Homepage from \"./Pages/Homepage\";\r\nimport { Route } from \"react-router-dom\";\r\nimport Chatpage from \"./Pages/Chatpage\";\r\nimport Joingrp from \"./Pages/Joingrp\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Route path=\"/\" component={Homepage} exact />\r\n      <Route path=\"/chats\" component={Chatpage} />\r\n      <Route path=\"/joingrp/:chatId/:userId\" component={Joingrp} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React, { useState } from 'react'\r\nimport ScheduleFormContext from './SchedulemessageForm'\r\n\r\nconst ScheduleFormProvider = ({children}) => {\r\n    const [ScheduleFormVis,setScheduleFormVis] =useState(false);\r\n  return (\r\n    <ScheduleFormContext.Provider value={{ScheduleFormVis,setScheduleFormVis}}>\r\n        {children}\r\n    </ScheduleFormContext.Provider>\r\n  )\r\n}\r\n\r\nexport default ScheduleFormProvider","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { ChakraProvider } from \"@chakra-ui/react\";\r\nimport ChatProvider from \"./Context/ChatProvider\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport ScheduleFormProvider from \"./Context/ScheduleFormProvider\";\r\n\r\nReactDOM.render(\r\n  <ChakraProvider>\r\n    <BrowserRouter>\r\n      <ChatProvider>\r\n        <ScheduleFormProvider>\r\n          <App />\r\n        </ScheduleFormProvider>\r\n      </ChatProvider>\r\n    </BrowserRouter>\r\n  </ChakraProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}